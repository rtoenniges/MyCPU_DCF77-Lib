                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                ;~~  [MyCA] Macro Cross Assembler V1.05 for MyCPU, (c) 2016 by Dennis Kuschel  ~~
                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                ;[File: sl60dcf77.asm]
                ;[ASCII]
                ;******************************************
                ;***********  DCF77 Library  **************
                ;******************************************
                ;******  by Robin TÃ¶nniges (2017)  ********
                ;******************************************
                
                ;[File: C:\Program Files (x86)\myca\include\sys.hsm]
                ;[ASCII]
                
                KERN_WARMSTART      EQU 0220h
                KERN_FILEINPUT      EQU 027Ah
                KERN_GETINFO        EQU 02A2h
                KERN_REGFILEDEVICE  EQU 0264h
                KERN_FSREGISTER     EQU 02AEh
                KERN_FSUNREGISTER   EQU 02B0h
                KERN_GETCHECKSUM16  EQU 02B2h
                KERN_SETMEMBORDERS  EQU 029Eh
                KERN_SETIDLEFUNC    EQU 02EAh
                KERN_IDLE           EQU 02ECh
                KERN_TESTVERSION    EQU 030Ch
                KERN_CONFIGBYTE     EQU 030Ah
                KERN_IDEDRIVER      EQU 030Eh
                KERN_MULTIPLEX      EQU 0312h
                KERN_PRGMOVE        EQU 032Ah
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                ;[ASCII]
                
                ;[File: C:\Program Files (x86)\myca\include\code.hsm]
                ;[ASCII]
                
                KERN_ADAPTOPCODES   EQU 02C4h
                KERN_EXECUTEFILE    EQU 02BEh
                KERN_EXITTSR        EQU 02C2h
                KERN_KILLPROGRAM    EQU 02C0h
                KERN_KILLPROGEX     EQU 0328h
                KERN_SPECROMCALL    EQU 02B6h
                KERN_CALLFROMROM    EQU 02B8h
                KERN_CALLROM        EQU 02BAh
                KERN_LIBCALL        EQU 02CAh
                KERN_LIBSELECT      EQU 02CCh
                KERN_LIBDESELECT    EQU 02CEh
                KERN_LIBUNLOAD      EQU 02D0h
                KERN_ISLOADED       EQU 02D2h
                KERN_ASSERT         EQU 0326h
                
                REG_ROMPAGE  SET 3900h
                
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                
                ORG 8000h
    8000 0280    DW 8002h
    8002 1D80    DW disp__func
    8004 5480    DW termfunc
    8006 1D80    DW codestart
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\code.hsm]
                ;[ASCII]
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\interrupt.hsm]
                ;[ASCII]
                
                KERN_IC_ENABLEINT   EQU 0222h
                KERN_IC_DISABLEINT  EQU 0224h
                KERN_IC_GETVECTOR   EQU 0226h
                KERN_IC_SETVECTOR   EQU 0228h
                KERN_IC_REGISTERBH  EQU 022Ah
                KERN_SPINLOCK       EQU 02A8h
                KERN_INTVECT        EQU 0332h
                
                KERN_INSDELTIMER    EQU 02AAh
                
                ;[File: sl60dcf77.asm]
                ;Comment this line out if you dont want synced status on Multi-I/O-LEDs
                ;Comment this line in if you use the SCC-Rack-Extension
                ;#DEFINE SCC_BOARD 
                
                ;-------------------------------------;
                ; declare variables
                
                ;Zeropointer
                ZP_temp1            EQU  10h
                
                ;Constants
                HDW_INT             EQU 7       ;IRQ7
                HDW_SCC_BOARD       EQU 3000h   ;Address of SCC board
                KERN_IOCHANGELED    EQU 0306h   ;Kernel routine for changing the Multi-I/O-LEDs
                CONST_SECOND        EQU 30      ;Timer divider for "pseudo second" (30 = 0,983s)
                
                ;Parameter
                PARAM_LOWHIGH       EQU 4       ;Edge time < PARAM_LOWHIGH = 0(Low), >= PARAM_LOWHIGH = 1(High)
                PARAM_SYNCPAUSE     EQU 35      ;Edge time < PARAM_SYNCPAUSE = New second/bit, >= PARAM_SYNCPAUSE = Syncpoint
                PARAM_SECOND        EQU 10      ;Edge time < PARAM_SECOND = New bit, >= PARAM_SECOND = New second
                
                ;Variables
    8008 01     FLG_dcfReceiver     DB  1   ;This flag is set to 1 if input comes from the DCF77-Receiver
    8009 01     FLG_synced          DB  1   ;Sync flag -> 0 if synchron with dcf77
    800A 00     VAR_edgeCnt         DB  0   ;Edge counter
    800B 00     VAR_dataOK          DB  0   ;Parity check -> Bit 1 = Minutes OK, Bit 2 = Hours OK, Bit 3 = Date OK
                
    800C 00     VAR_pSecond         DB  0   ;Pseudo second to bridge desynchronization
    800D 00     VAR_second          DB  0   ;DCF77-Second/Bit counter
                
                ;Time variables initialized with FFh to "lock" Get-functions until 2nd synchronization point reached
    800E FF     VAR_minutes         DB  FFh
    800F FF     VAR_hours           DB  FFh
                
    8010 FF     VAR_day             DB  FFh
    8011 FF     VAR_weekday         DB  FFh
    8012 FF     VAR_month           DB  FFh
    8013 FF     VAR_year            DB  FFh
                
    8014 00     VAR_dateParity      DB  0
                
    8015 00     VAR_tmpMinutes      DB  0
    8016 00     VAR_tmpHours        DB  0
    8017 00     VAR_tmpDay          DB  0
    8018 00     VAR_tmpWeekday      DB  0
    8019 00     VAR_tmpMonth        DB  0
    801A 00     VAR_tmpYear         DB  0
                
    801B 00     VAR_timerhandle     DB  0   ;Address of timer interrupt handle
                
    801C 00     VAR_ledsDataOK      DB 0
                
                ;-------------------------------------;
                ; begin of assembly code
                
                codestart
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                ;[ASCII]
                
                disp__func
    801D E000      ORA #0
    801F 186B80    JNZ funcdispatch
    8022 04        CLC
    8023 1BD202    JSR (KERN_ISLOADED)
    8026 2C        CLA
    8027 173480    JPC exit_lib
    802A 1A3580    JSR initfunc
    802D 20        TAX
    802E 183480    JNZ exit_lib
    8031 11C202    JMP (KERN_EXITTSR)
                exit_lib
    8034 1F        RTS
                
                ;[File: sl60dcf77.asm]
                ;--------------------------------------------------------- 
                ;Library handling  
                ;---------------------------------------------------------  
                
                ;Library initialization
                ;---------------------------------------------------------   
                initfunc
                
                ;Initialize zeropage variables
    8035 3C10               FLG  ZP_temp1   ;Time between two interrupts (Value * 1/30.517578Hz)s 
    8037 3C11               FLG  ZP_temp1+1 ;Temporary data
                
                ;Enable hardware interrupt (IRQ7)
    8039 3007               LDA  #HDW_INT
    803B 6C3681             LPT  #int_dcf77
    803E 1B2802             JSR  (KERN_IC_SETVECTOR)
    8041 1B2202             JSR  (KERN_IC_ENABLEINT)
                
                ;Enable timer interrupt
    8044 2C                 CLA    
    8045 6C3F81             LPT  #int_timer
    8048 1B1203             JSR  (KERN_MULTIPLEX)
    804B 421B80             STAA VAR_timerhandle  ;Save adress of timerhandle  
                
                ;If sync display enabled clear LEDs 
    804E 2C                 CLA
    804F 1B0603             JSR (KERN_IOCHANGELED)
    8052 2C                 CLA
    8053 1F                 RTS
                
                ;Termination function
                ;---------------------------------------------------------                  
                termfunc  
                            ;Disable timer-interrupt
    8054 3001               LDA  #1
    8056 521B80             LDXA VAR_timerhandle      
    8059 1B1203             JSR (KERN_MULTIPLEX)
                            ;Disable hardware-interrupt
    805C 3007               LDA #HDW_INT
    805E 1B2402             JSR (KERN_IC_DISABLEINT)
                            ;Disable spinlock
    8061 04                 CLC
    8062 1BA802             JSR (KERN_SPINLOCK)
                            ;Set LEDs to default
    8065 30FF               LDA #0FFh
    8067 1B0603             JSR (KERN_IOCHANGELED)
    806A 1F                 RTS
                
                ;Functiondispatch
                ;---------------------------------------------------------     
                funcdispatch
    806B 9B                 DEC
    806C 198E80             JPZ func_getSeconds     ;Function 01h  
    806F 9B                 DEC 
    8070 199A80             JPZ func_getMinutes     ;Function 02h         
    8073 9B                 DEC 
    8074 19B380             JPZ func_getHours       ;Function 03h 
    8077 9B                 DEC 
    8078 19CC80             JPZ func_getDay         ;Function 04h   
    807B 9B                 DEC 
    807C 19E580             JPZ func_getWeekday     ;Function 05h       
    807F 9B                 DEC 
    8080 19FE80             JPZ func_getMonth       ;Function 06h      
    8083 9B                 DEC 
    8084 191781             JPZ func_getYear        ;Function 07h 
    8087 9B                 DEC 
    8088 193081             JPZ func_getEntryPoint  ;Function 08h
    808B 105084             JMP _failRTS
                
                ;Function '01h' = Get seconds (OUTPUT = Accu), Carry = 0 if successfull
                func_getSeconds
    808E 320980             LDAA FLG_synced
    8091 185084             JNZ _failRTS
    8094 320D80             LDAA VAR_second
    8097 104E84             JMP _RTS
                
                ;Function '02h' = Get minutes (OUTPUT = Accu), Carry = 0 if successfull         
                func_getMinutes  
    809A 320980             LDAA FLG_synced
    809D 185084             JNZ _failRTS
    80A0 320B80             LDAA VAR_dataOK
    80A3 D001               AND #01h
    80A5 195084             JPZ _failRTS
    80A8 320E80             LDAA VAR_minutes
    80AB 70FF               CMP #FFh
    80AD 195084             JPZ _failRTS
    80B0 104E84             JMP _RTS
                
                ;Function '03h' = Get hours (OUTPUT = Accu), Carry = 0 if successfull 
                func_getHours
    80B3 320980             LDAA FLG_synced
    80B6 185084             JNZ _failRTS
    80B9 320B80             LDAA VAR_dataOK
    80BC D002               AND #02h
    80BE 195084             JPZ _failRTS
    80C1 320F80             LDAA VAR_hours
    80C4 70FF               CMP #FFh
    80C6 195084             JPZ _failRTS
    80C9 104E84             JMP _RTS        
                
                ;Function '04h' = Get day (OUTPUT = Accu), Carry = 0 if successfull 
                func_getDay
    80CC 320980             LDAA FLG_synced
    80CF 185084             JNZ _failRTS
    80D2 320B80             LDAA VAR_dataOK
    80D5 D004               AND #04h
    80D7 195084             JPZ _failRTS
    80DA 321080             LDAA VAR_day
    80DD 70FF               CMP #FFh
    80DF 195084             JPZ _failRTS
    80E2 104E84             JMP _RTS    
                
                ;Function '05h' = Get weekday (OUTPUT = Accu), Carry = 0 if successfull 
                ;1 = monday, 2 = tuesday, 3 = wednesday, 4 = thursday, 5 = friday, 6 = saturday, 7 = sunday
                func_getWeekday
    80E5 320980             LDAA FLG_synced
    80E8 185084             JNZ _failRTS
    80EB 320B80             LDAA VAR_dataOK
    80EE D004               AND #04h
    80F0 195084             JPZ _failRTS
    80F3 321180             LDAA VAR_weekday
    80F6 70FF               CMP #FFh
    80F8 195084             JPZ _failRTS
    80FB 104E84             JMP _RTS   
                
                ;Function '06h' = Get month (OUTPUT = Accu), Carry = 0 if successfull 
                func_getMonth
    80FE 320980             LDAA FLG_synced
    8101 185084             JNZ _failRTS
    8104 320B80             LDAA VAR_dataOK
    8107 D004               AND #04h
    8109 195084             JPZ _failRTS
    810C 321280             LDAA VAR_month
    810F 70FF               CMP #FFh
    8111 195084             JPZ _failRTS
    8114 104E84             JMP _RTS     
                
                ;Function '07h' = Get year (OUTPUT = Accu), Carry = 0 if successfull 
                func_getYear
    8117 320980             LDAA FLG_synced
    811A 185084             JNZ _failRTS
    811D 320B80             LDAA VAR_dataOK
    8120 D004               AND #04h
    8122 195084             JPZ _failRTS
    8125 321380             LDAA VAR_year
    8128 70FF               CMP #FFh
    812A 195084             JPZ _failRTS
    812D 104E84             JMP _RTS
                
                ;Function '08h' = Get entrypoint of library         
                func_getEntryPoint
    8130 6C6B80             LPT #funcdispatch
    8133 104E84             JMP _RTS
                
                ;--------------------------------------------------------- 
                ;Interrupt routines   
                ;---------------------------------------------------------       
                
                ;Receiver interrupt        
                int_dcf77
    8136 3001               LDA #1 
    8138 420880             STAA FLG_dcfReceiver ;Flank detected -> Set flag
    813B 7D0A80             INCA VAR_edgeCnt ;Count edges (For signal error detection)
    813E 1F                 RTS       
                
                ;Timer interrupt
                int_timer
    813F 320880             LDA FLG_dcfReceiver
    8142 184881             JNZ decode       
                            ;Measure time between two edges
    8145 7C10               INC ZP_temp1
    8147 1F                 RTS
                
                ;--------------------------------------------------------- 
                ;DCF77 decoding   
                ;---------------------------------------------------------
                decode 
                ;From this point no interrupt should break the programm
    8148 05                 SEC
    8149 1BA802             JSR (KERN_SPINLOCK) ;"You shall not pass"           
                
                ;Synchronize with signal -> Detect syncpoint/-gap
    814C 3110               LDA ZP_temp1
    814E 7023               CMP #PARAM_SYNCPAUSE  
    8150 165F81             JNC _dec0
                ;Time >= PARAM_SYNCPAUSE -> Time longer than 1 second
                ;Syncpoint reached
    8153 2F0980             STZ FLG_synced
    8156 2F0D80             STZ VAR_second
    8159 2F0A80             STZ VAR_edgeCnt
    815C 10A183             JMP _decEnd
                
                ;Time < PARAM_SYNCPAUSE -> New second or bit information     
                ;Count seconds, Check signal for errors   
    815F 700A   _dec0       CMP #PARAM_SECOND 
    8161 166A81             JNC newBit
                            ;Time >= PARAM_SECOND -> Next second
    8164 7D0D80             INCA VAR_second  
    8167 10A183             JMP _decEnd
                
                ;Time < PARAM_SECOND -> New bit 
                newBit 
                ;Display synced status on I/O-Module LEDs
    816A 1AAC83             JSR syncDisp
                ;Display synced status on SCC-Board
                ;First do signal checking -> Twice as many edges+1 as seconds?
    816D 320A80             LDAA VAR_edgeCnt
    8170 05                 SEC
    8171 9001               SBC #1
    8173 B002               DIV #2
    8175 720D80             CMPA VAR_second
    8178 198E81             JPZ _nBit0 ;Check successfull -> Go forward to bit checking
                
                ;No longer synchronized        
                deSync  
    817B 3001               LDA #1 
    817D 420980             STAA FLG_synced
    8180 2F0B80             STZ VAR_dataOK
    8183 3008               LDA #08h
    8185 D21C80             ANDA VAR_ledsDataOK
    8188 421C80             STAA VAR_ledsDataOK
    818B 10A183             JMP _decEnd
                
                ;Decode bit     
                _nBit0  
    818E 320D80             LDAA VAR_second
    8191 18D981             JNZ _nBit3
    8194 1A1F84             JSR getBit
    8197 187B81             JNZ deSync ;If Bit 0 != 0 -> Not synchronized or incorrect signal
                
                ;Second/bit = 0 -> Take over data from last minute            
    819A 320B80             LDAA VAR_dataOK
    819D D001               AND #01h
    819F 19A881             JPZ _nBit1
    81A2 321580             LDAA VAR_tmpMinutes ;Take over 'minutes'
    81A5 420E80             STAA VAR_minutes
    81A8 320B80 _nBit1      LDAA VAR_dataOK
    81AB D002               AND #02h
    81AD 19B681             JPZ _nBit2
    81B0 321680             LDAA VAR_tmpHours ;Take over 'hours'
    81B3 420F80             STAA VAR_hours
    81B6 320B80 _nBit2      LDAA VAR_dataOK
    81B9 D004               AND #04h
    81BB 19A183             JPZ _decEnd
    81BE 321880             LDAA VAR_tmpWeekday ;Take over 'weekday'
    81C1 421180             STAA VAR_weekday
    81C4 321780             LDAA VAR_tmpDay ;Take over 'day'
    81C7 421080             STAA VAR_day
    81CA 321980             LDAA VAR_tmpMonth ;Take over 'month'
    81CD 421280             STAA VAR_month
    81D0 321A80             LDAA VAR_tmpYear ;Take over 'year'
    81D3 421380             STAA VAR_year
    81D6 10A183             JMP _decEnd
                
    81D9 7014   _nBit3      CMP #20
    81DB 16A183             JNC _decEnd ;Below bit 20 is nothing important
    81DE 18EA81             JNZ _nBit4
    81E1 1A1F84             JSR getBit; Second/bit = 20 -> Begin of time information always '1'
    81E4 197B81             JPZ deSync ;If Bit 20 != 1 -> Not synchronized or incorrect signal
    81E7 10A183             JMP _decEnd
                
                ;Bit >20 - Get/decode data
    81EA 320980 _nBit4      LDAA FLG_synced
    81ED 18A183             JNZ _decEnd
                            ;Only continue if synchronized
    81F0 320D80             LDAA VAR_second
    81F3 701D               CMP #29
    81F5 161D82             JNC getMinutes ;Go to minute decoding
                            ;Second >= 29
    81F8 7024               CMP #36
    81FA 166A82             JNC getHours ;Go to hour decoding
                            ;Second >= 36
    81FD 702A               CMP #42
    81FF 16B982             JNC getDay ;Go to day decoding
                            ;Second >= 42
    8202 702D               CMP #45
    8204 16E982             JNC getWDay ;Go to weekday decoding
                            ;Second >= 45
    8207 7032               CMP #50
    8209 161D83             JNC getMonth ;Go to month decoding
                            ;Second >= 50
    820C 703B               CMP #59
    820E 165183             JNC getYear ;Go to year decoding
    8211 18A183             JNZ _decEnd
                            ;Second = 59 -> Leap second!
    8214 1A1F84             JSR getBit ;Always '0'
    8217 187B81             JNZ deSync 
    821A 10A183             JMP _decEnd
                
                ;Get/decode minutes
                ;---------------------------------------------------------
                getMinutes   
    821D 701C               CMP #28
    821F 193582             JPZ parityMinutes ;Last bit -> Check parity
    8222 7015               CMP #21
    8224 182A82             JNZ _gMin0
    8227 481100             MOV ZP_temp1+1,#0 ;First bit -> Clear data
                
                ;Get bit (minutes)
    822A 1A1F84 _gMin0      JSR getBit
    822D E111               ORA ZP_temp1+1
    822F DB                 SHR
    8230 4111               STA ZP_temp1+1
    8232 10A183             JMP _decEnd
                
                ;Last bit
                ;Check parity (minutes)        
                parityMinutes  
    8235 1A1F84             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    8238 08                 PHA
                            ;Determine if bitcount of data is even or odd
    8239 3111               LDA ZP_temp1+1
    823B 5007               LDX #7
    823D 2E                 CLY
    823E 1A2B84             JSR bitCnt
    8241 175382             JPC _pMin0   
    8244 0C                 PLA ;Bit count = "odd"
    8245 185782             JNZ _pMinOK
                
    8248 3006   _pMinBAD    LDA #06h ;Parity n.OK
    824A D20B80             ANDA VAR_dataOK
    824D 420B80             STAA VAR_dataOK
    8250 10A183             JMP _decEnd
                
    8253 0C     _pMin0      PLA ;Bit count = "even"
    8254 184882             JNZ _pMinBAD
                
    8257 3111   _pMinOK     LDA ZP_temp1+1 ;Parity OK
    8259 1A4084             JSR bcdToDec
    825C 421580             STAA VAR_tmpMinutes
    825F 3001               LDA #01h
    8261 E20B80             ORAA VAR_dataOK
    8264 420B80             STAA VAR_dataOK
    8267 10A183             JMP _decEnd
                
                ;Get/decode hours
                ;---------------------------------------------------------
                getHours
    826A 7023               CMP #35
    826C 198282             JPZ parityHours ;Last bit -> Check parity
    826F 701D               CMP #29
    8271 187782             JNZ _gHrs0
    8274 481100             MOV ZP_temp1+1,#0 ;First Bit -> Clear data
                
                ;Get bit (hours)
    8277 1A1F84 _gHrs0      JSR getBit
    827A E111               ORA ZP_temp1+1
    827C DB                 SHR
    827D 4111               STA ZP_temp1+1 
    827F 10A183             JMP _decEnd
                
                ;Last bit
                ;Check parity (hours)         
                parityHours       
    8282 BC11               SHR ZP_temp1+1 ;Shift data right by 1
                
    8284 1A1F84             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    8287 08                 PHA
                            ;Determine if bitcount of data is even or odd
    8288 3111               LDA ZP_temp1+1  
    828A 5006               LDX #6
    828C 2E                 CLY
    828D 1A2B84             JSR bitCnt
    8290 17A282             JPC _pHrs0   
    8293 0C                 PLA ;Bit count = "odd"
    8294 18A682             JNZ _pHrsOK
                
    8297 3005   _pHrsBAD    LDA #05h ;Parity n.OK
    8299 D20B80             ANDA VAR_dataOK
    829C 420B80             STAA VAR_dataOK
    829F 10A183             JMP _decEnd
                
    82A2 0C     _pHrs0      PLA ;Bit count = "even"
    82A3 189782             JNZ _pHrsBAD
                
    82A6 3111   _pHrsOK     LDA ZP_temp1+1 ;Parity OK
    82A8 1A4084             JSR bcdToDec
    82AB 421680             STAA VAR_tmpHours
    82AE 3002               LDA #02h
    82B0 E20B80             ORAA VAR_dataOK
    82B3 420B80             STAA VAR_dataOK
    82B6 10A183             JMP _decEnd
                
                ;Get/decode day
                ;---------------------------------------------------------
                getDay  
    82B9 7024               CMP #36 
    82BB 18C182             JNZ _gDay0
    82BE 481100             MOV ZP_temp1+1,#0 ;First Bit -> Clear data
                
                ;Get bit (day)      
    82C1 1A1F84 _gDay0      JSR getBit
    82C4 E111               ORA ZP_temp1+1
    82C6 DB                 SHR
    82C7 4111               STA ZP_temp1+1  
                            ;Check for last bit
    82C9 320D80             LDAA VAR_second
    82CC 7029               CMP #41       
    82CE 18A183             JNZ _decEnd 
                
                ;Last bit
    82D1 BC11               SHR ZP_temp1+1 ;Shift data right by 1 
                
                            ;Count high bits and add it to "VAR_dateParity"
    82D3 3111               LDA ZP_temp1+1  
    82D5 5006               LDX #6
    82D7 2E                 CLY
    82D8 1A2B84             JSR bitCnt
    82DB 421480             STAA VAR_dateParity
                            ;Save day value
    82DE 3111               LDA ZP_temp1+1
    82E0 1A4084             JSR bcdToDec
    82E3 421780             STAA VAR_tmpDay
    82E6 10A183             JMP _decEnd        
                
                ;Get/decode weekday
                ;---------------------------------------------------------
                getWDay 
    82E9 702A               CMP #42
    82EB 18F182             JNZ _getWDay0
    82EE 481100             MOV ZP_temp1+1,#0 ;First Bit -> Clear data
                
                ;Get bit (weekday)    
    82F1 1A1F84 _getWDay0   JSR getBit
    82F4 E111               ORA ZP_temp1+1
    82F6 DB                 SHR
    82F7 4111               STA ZP_temp1+1 
                            ;Check for last bit
    82F9 320D80             LDAA VAR_second
    82FC 702C               CMP #44       
    82FE 18A183             JNZ _decEnd
                
                ;Last bit
                            ;Shift data right by 4
    8301 3111               LDA ZP_temp1+1 
    8303 B010               DIV #10h
    8305 4111               STA ZP_temp1+1 
                
                            ;Count high bits and add it to "VAR_dateParity"
    8307 5003               LDX #3
    8309 591480             LDYA VAR_dateParity
    830C 1A2B84             JSR bitCnt
    830F 421480             STAA VAR_dateParity
                            ;Save weekday value
    8312 3111               LDA ZP_temp1+1 
    8314 1A4084             JSR bcdToDec
    8317 421880             STAA VAR_tmpWeekday
    831A 10A183             JMP _decEnd  
                
                ;Get/decode month
                ;---------------------------------------------------------
                getMonth    
    831D 702D               CMP #45
    831F 182583             JNZ _gMon0
    8322 481100             MOV ZP_temp1+1 ,#0 ;First Bit -> Clear data
                
                ;Get bit (month)
    8325 1A1F84 _gMon0      JSR getBit
    8328 E111               ORA ZP_temp1+1 
    832A DB                 SHR
    832B 4111               STA ZP_temp1+1  
                            ;Check for last bit
    832D 320D80             LDAA VAR_second
    8330 7031               CMP #49       
    8332 18A183             JNZ _decEnd 
                
                ;Last bit
                            ;Shift data right by 2
    8335 BC11               SHR ZP_temp1+1   
    8337 BC11               SHR ZP_temp1+1  
                
                            ;Count high bits and add it to "VAR_dateParity"
    8339 3111               LDA ZP_temp1+1   
    833B 5005               LDX #5
    833D 591480             LDYA VAR_dateParity
    8340 1A2B84             JSR bitCnt
    8343 421480             STAA VAR_dateParity
                            ;Save month value
    8346 3111               LDA ZP_temp1+1 
    8348 1A4084             JSR bcdToDec
    834B 421980             STAA VAR_tmpMonth
    834E 10A183             JMP _decEnd 
                
                ;Get/decode year
                ;---------------------------------------------------------
                getYear     
    8351 703A               CMP #58
    8353 196A83             JPZ parityDate ;Last bit -> Check parity
    8356 7032               CMP #50
    8358 185E83             JNZ _gYear0
    835B 481100             MOV ZP_temp1+1 ,#0 ;First Bit -> Clear data
                
                ;Get bit (year)
    835E BC11   _gYear0     SHR ZP_temp1+1 
    8360 1A1F84             JSR getBit
    8363 E111               ORA ZP_temp1+1 
    8365 4111               STA ZP_temp1+1  
    8367 10A183             JMP _decEnd
                
                ;Last bit
                ;Check parity for whole date (Day, weekday, month, year)         
                parityDate
    836A 1A1F84             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    836D 08                 PHA
                            ;Count high bits and add it to "VAR_dateParity"
                            ;Determine if bitcount of "VAR_dateParity" is even or odd
    836E 3111               LDA ZP_temp1+1 
    8370 5008               LDX #8
    8372 591480             LDYA VAR_dateParity
    8375 1A2B84             JSR bitCnt
    8378 178A83             JPC _pDat0
    837B 0C                 PLA ;Bit count = "odd" 
    837C 188E83             JNZ _pDateOK
                
    837F 3003   _pDateBAD   LDA #03h ;Partity n.OK
    8381 D20B80             ANDA VAR_dataOK
    8384 420B80             STAA VAR_dataOK
    8387 10A183             JMP _decEnd
                
    838A 0C     _pDat0      PLA ;Bit count = "even"
    838B 187F83             JNZ _pDateBAD
                
    838E 3111   _pDateOK    LDA ZP_temp1+1  ;Parity OK
    8390 1A4084             JSR bcdToDec
    8393 421A80             STAA VAR_tmpYear ;Save year value
    8396 3004               LDA #04h
    8398 E20B80             ORAA VAR_dataOK
    839B 420B80             STAA VAR_dataOK
    839E 10A183             JMP _decEnd
                
                ;Ready for next bit
                _decEnd
    83A1 2F0880             STZ FLG_dcfReceiver ;Reset dcf77 interrupt flag 
    83A4 481000             MOV ZP_temp1, #0 ;Reset Edge time
    83A7 04                 CLC
    83A8 1BA802             JSR (KERN_SPINLOCK) ;Enable the interrupts again
    83AB 1F                 RTS
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on Multi-I/O LEDs   
                ;---------------------------------------------------------
                syncDisp
                ;Display synced status           
    83AC 320980             LDAA FLG_synced
    83AF 19BD83             JPZ _syncD0
    83B2 3008               LDA #08h 
    83B4 F21C80             EORA VAR_ledsDataOK
    83B7 421C80             STAA VAR_ledsDataOK
    83BA 101584             JMP _syncD4
    83BD 3008   _syncD0     LDA #08h 
    83BF E21C80             ORAA VAR_ledsDataOK
    83C2 421C80             STAA VAR_ledsDataOK
                
    83C5 320D80             LDAA VAR_second
    83C8 7015               CMP #21
    83CA 161584             JNC _syncD4 ;Second <21 -> No time information fetching
    83CD 701D               CMP #29
    83CF 16DF83             JNC _syncD1 ;Second >= 21 & <29 -> Fetching minutes
    83D2 7024               CMP #36
    83D4 16F283             JNC _syncD2 ;Second >= 29 & < 36 -> Fetching hours
    83D7 703B               CMP #59
    83D9 160584             JNC _syncD3 ;Second >= 36 & < 59 -> Fetching date
    83DC 101584             JMP _syncD4
                
                ;Fetching minutes
    83DF 320B80 _syncD1     LDAA VAR_dataOK
    83E2 D001               AND #01h
    83E4 181584             JNZ _syncD4
    83E7 3001               LDA #01h 
    83E9 F21C80             EORA VAR_ledsDataOK
    83EC 421C80             STAA VAR_ledsDataOK
    83EF 101584             JMP _syncD4
                
                ;Fetching hours
    83F2 320B80 _syncD2     LDAA VAR_dataOK
    83F5 D002               AND #02h
    83F7 181584             JNZ _syncD4
    83FA 3002               LDA #02h 
    83FC F21C80             EORA VAR_ledsDataOK
    83FF 421C80             STAA VAR_ledsDataOK
    8402 101584             JMP _syncD4
                
                ;Fetching date 
    8405 320B80 _syncD3     LDAA VAR_dataOK
    8408 D004               AND #04h
    840A 181584             JNZ _syncD4
    840D 3004               LDA #04h 
    840F F21C80             EORA VAR_ledsDataOK
    8412 421C80             STAA VAR_ledsDataOK
                
    8415 320B80 _syncD4     LDAA VAR_dataOK
    8418 E21C80             ORAA VAR_ledsDataOK
    841B 1B0603             JSR (KERN_IOCHANGELED)
    841E 1F                 RTS
                
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on SCC-Board   
                ;---------------------------------------------------------
                
                ;--------------------------------------------------------- 
                ;Helper functions   
                ;---------------------------------------------------------
                
                ;Get bit information from Time (Output: A = High(80h), Low(00h))        
                getBit      
    841F 3110               LDA ZP_temp1
    8421 7004               CMP #PARAM_LOWHIGH
    8423 162984             JNC _gBit0
                            ;Time >= PARAM_LOWHIGH -> Bit = 1
    8426 3080               LDA #80h
    8428 4D                 SKA
    8429 2C     _gBit0      CLA ;Time < PARAM_LOWHIGH -> Bit = 0
    842A 1F                 RTS
                
                ;Count high bits
                ;Input: A = Byte, X = Number of bits, Y = Counter offset
                ;Output: A = Counter value, Carry = 0 -> odd, Carry = 1 -> even
                bitCnt
    842B DB     _bCnt0      SHR
    842C 163084             JNC _bCnt1
    842F 8B                 INY
    8430 492B84 _bCnt1      DXJP _bCnt0
    8433 29                 SAY
    8434 08                 PHA
    8435 C002               MOD #2
    8437 193C84             JPZ _bCnt2
    843A 04                 CLC ;Counter value "odd"
    843B 4D                 SKA
    843C 05     _bCnt2      SEC ;Counter value "even"
    843D 0C                 PLA
    843E 1F                 RTS
                
                ;Convert BCD to decimal (Input: A = BCD value) (Output: A = decimal vlaue) 
    843F 00     VAR_tmpConvert  DB  0      
                bcdToDec
    8440 08                 PHA
    8441 B010               DIV #10h
    8443 A00A               MUL #0Ah
    8445 4111               STA ZP_temp1+1
    8447 0C                 PLA
    8448 D00F               AND #0Fh
    844A 04                 CLC
    844B 8111               ADC ZP_temp1+1
    844D 1F                 RTS
                
                _RTS    
    844E 04                 CLC
    844F 1F                 RTS
                
                _failRTS
    8450 2C                 CLA
    8451 05                 SEC
    8452 1F                 RTS
                
                


Segment Table:
**************
Segment Name                 Startaddr  Endaddr     Size  Type
=========================================================================
default                           8000     8452      453  CODE  fixed
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

No errors found.
