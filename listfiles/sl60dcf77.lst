                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                ;~~  [MyCA] Macro Cross Assembler V1.05 for MyCPU, (c) 2016 by Dennis Kuschel  ~~
                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                ;[File: sl60dcf77.asm]
                ;[ASCII]
                ;******************************************
                ;***********  DCF77 Library  **************
                ;******************************************
                ;******  by Robin TÃ¶nniges (2017)  ********
                ;******************************************
                
                ;[File: C:\Program Files (x86)\myca\include\sys.hsm]
                ;[ASCII]
                
                KERN_WARMSTART      EQU 0220h
                KERN_FILEINPUT      EQU 027Ah
                KERN_GETINFO        EQU 02A2h
                KERN_REGFILEDEVICE  EQU 0264h
                KERN_FSREGISTER     EQU 02AEh
                KERN_FSUNREGISTER   EQU 02B0h
                KERN_GETCHECKSUM16  EQU 02B2h
                KERN_SETMEMBORDERS  EQU 029Eh
                KERN_SETIDLEFUNC    EQU 02EAh
                KERN_IDLE           EQU 02ECh
                KERN_TESTVERSION    EQU 030Ch
                KERN_CONFIGBYTE     EQU 030Ah
                KERN_IDEDRIVER      EQU 030Eh
                KERN_MULTIPLEX      EQU 0312h
                KERN_PRGMOVE        EQU 032Ah
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                ;[ASCII]
                
                ;[File: C:\Program Files (x86)\myca\include\code.hsm]
                ;[ASCII]
                
                KERN_ADAPTOPCODES   EQU 02C4h
                KERN_EXECUTEFILE    EQU 02BEh
                KERN_EXITTSR        EQU 02C2h
                KERN_KILLPROGRAM    EQU 02C0h
                KERN_KILLPROGEX     EQU 0328h
                KERN_SPECROMCALL    EQU 02B6h
                KERN_CALLFROMROM    EQU 02B8h
                KERN_CALLROM        EQU 02BAh
                KERN_LIBCALL        EQU 02CAh
                KERN_LIBSELECT      EQU 02CCh
                KERN_LIBDESELECT    EQU 02CEh
                KERN_LIBUNLOAD      EQU 02D0h
                KERN_ISLOADED       EQU 02D2h
                KERN_ASSERT         EQU 0326h
                
                REG_ROMPAGE  SET 3900h
                
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                
                ORG 8000h
    8000 0280    DW 8002h
    8002 1D80    DW disp__func
    8004 5480    DW termfunc
    8006 1D80    DW codestart
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\code.hsm]
                ;[ASCII]
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\interrupt.hsm]
                ;[ASCII]
                
                KERN_IC_ENABLEINT   EQU 0222h
                KERN_IC_DISABLEINT  EQU 0224h
                KERN_IC_GETVECTOR   EQU 0226h
                KERN_IC_SETVECTOR   EQU 0228h
                KERN_IC_REGISTERBH  EQU 022Ah
                KERN_SPINLOCK       EQU 02A8h
                KERN_INTVECT        EQU 0332h
                
                KERN_INSDELTIMER    EQU 02AAh
                
                ;[File: sl60dcf77.asm]
                ;Comment this line out if you dont want synced status on Multi-I/O-LEDs
                ;Comment this line in if you use the SCC-Rack-Extension
                ;#DEFINE SCC_BOARD 
                
                ;-------------------------------------;
                ; declare variables
                
                ;Zeropointer
                ZP_temp1            EQU  10h
                
                ;Constants
                HDW_INT             EQU 7       ;IRQ7
                HDW_SCC_BOARD       EQU 3000h   ;Address of SCC board
                KERN_IOCHANGELED    EQU 0306h   ;Kernel routine for changing the Multi-I/O-LEDs
                
                ;Parameter
                PARAM_LOWHIGH       EQU 4       ;Edge time < PARAM_LOWHIGH = 0(Low), >= PARAM_LOWHIGH = 1(High)
                PARAM_SYNCPAUSE     EQU 40      ;Edge time < PARAM_SYNCPAUSE = New second/bit, >= PARAM_SYNCPAUSE = Syncpoint
                PARAM_SECOND        EQU 20      ;Edge time < PARAM_SECOND = New bit, >= PARAM_SECOND = New second
                
                ;Variables
    8008 01     FLG_dcfReceiver     DB  1   ;This flag is set to 1 if input comes from the DCF77-Receiver
    8009 01     FLG_synced          DB  1   ;Sync flag -> 0 if synchron with dcf77
    800A 00     VAR_edgeCnt         DB  0   ;Edge counter
    800B 00     VAR_dataOK          DB  0   ;Parity check -> Bit 1 = Minutes OK, Bit 2 = Hours OK, Bit 3 = Date OK
                
    800C 00     VAR_pSecond         DB  0   ;Pseudo second to bridge desynchronization
    800D 00     VAR_second          DB  0   ;DCF77-Second/Bit counter
                
                ;Time variables initialized with FFh to "lock" Get-functions until 2nd synchronization point reached
    800E FF     VAR_minutes         DB  FFh
    800F FF     VAR_hours           DB  FFh
                
    8010 FF     VAR_day             DB  FFh
    8011 FF     VAR_weekday         DB  FFh
    8012 FF     VAR_month           DB  FFh
    8013 FF     VAR_year            DB  FFh
                
    8014 00     VAR_dateParity      DB  0
                
    8015 00     VAR_tmpMinutes      DB  0
    8016 00     VAR_tmpHours        DB  0
    8017 00     VAR_tmpDay          DB  0
    8018 00     VAR_tmpWeekday      DB  0
    8019 00     VAR_tmpMonth        DB  0
    801A 00     VAR_tmpYear         DB  0
    801B 00     VAR_ledsDataOK      DB  0
                
    801C 00     VAR_timerhandle     DB  0   ;Address of timer interrupt handle
                
                ;-------------------------------------;
                ; begin of assembly code
                
                codestart
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                ;[ASCII]
                
                disp__func
    801D E000      ORA #0
    801F 186B80    JNZ funcdispatch
    8022 04        CLC
    8023 1BD202    JSR (KERN_ISLOADED)
    8026 2C        CLA
    8027 173480    JPC exit_lib
    802A 1A3580    JSR initfunc
    802D 20        TAX
    802E 183480    JNZ exit_lib
    8031 11C202    JMP (KERN_EXITTSR)
                exit_lib
    8034 1F        RTS
                
                ;[File: sl60dcf77.asm]
                ;--------------------------------------------------------- 
                ;Library handling  
                ;---------------------------------------------------------  
                
                ;Library initialization
                ;---------------------------------------------------------   
                initfunc
                
                ;Initialize zeropage variables
    8035 3C10               FLG  ZP_temp1   ;Time between two interrupts (Value * 1/30.517578Hz)s 
    8037 3C11               FLG  ZP_temp1+1 ;Temporary data
                
                ;Enable hardware interrupt (IRQ7)
    8039 3007               LDA  #HDW_INT
    803B 6C3681             LPT  #int_dcf77
    803E 1B2802             JSR  (KERN_IC_SETVECTOR)
    8041 1B2202             JSR  (KERN_IC_ENABLEINT)
                
                ;Enable timer interrupt
    8044 2C                 CLA    
    8045 6C3F81             LPT  #int_timer
    8048 1B1203             JSR  (KERN_MULTIPLEX)
    804B 421C80             STAA VAR_timerhandle  ;Save adress of timerhandle  
                
                ;If sync display enabled clear LEDs 
    804E 2C                 CLA
    804F 1B0603             JSR (KERN_IOCHANGELED)
    8052 2C                 CLA
    8053 1F                 RTS
                
                ;Termination function
                ;---------------------------------------------------------                  
                termfunc  
                            ;Disable timer-interrupt
    8054 3001               LDA  #1
    8056 521C80             LDXA VAR_timerhandle      
    8059 1B1203             JSR (KERN_MULTIPLEX)
                            ;Disable hardware-interrupt
    805C 3007               LDA #HDW_INT
    805E 1B2402             JSR (KERN_IC_DISABLEINT)
                            ;Disable spinlock
    8061 04                 CLC
    8062 1BA802             JSR (KERN_SPINLOCK)
                            ;Set LEDs to default
    8065 30FF               LDA #0FFh
    8067 1B0603             JSR (KERN_IOCHANGELED)
    806A 1F                 RTS
                
                ;Functiondispatch
                ;---------------------------------------------------------     
                funcdispatch
    806B 9B                 DEC
    806C 198E80             JPZ func_getSeconds     ;Function 01h  
    806F 9B                 DEC 
    8070 199A80             JPZ func_getMinutes     ;Function 02h         
    8073 9B                 DEC 
    8074 19B380             JPZ func_getHours       ;Function 03h 
    8077 9B                 DEC 
    8078 19CC80             JPZ func_getDay         ;Function 04h   
    807B 9B                 DEC 
    807C 19E580             JPZ func_getWeekday     ;Function 05h       
    807F 9B                 DEC 
    8080 19FE80             JPZ func_getMonth       ;Function 06h      
    8083 9B                 DEC 
    8084 191781             JPZ func_getYear        ;Function 07h 
    8087 9B                 DEC 
    8088 193081             JPZ func_getEntryPoint  ;Function 08h
    808B 104B84             JMP _failRTS
                
                ;Function '01h' = Get seconds (OUTPUT = Accu), Carry = 0 if successfull
                func_getSeconds
    808E 320980             LDAA FLG_synced
    8091 184B84             JNZ _failRTS
    8094 320D80             LDAA VAR_second
    8097 104984             JMP _RTS
                
                ;Function '02h' = Get minutes (OUTPUT = Accu), Carry = 0 if successfull         
                func_getMinutes  
    809A 320980             LDAA FLG_synced
    809D 184B84             JNZ _failRTS
    80A0 320B80             LDAA VAR_dataOK
    80A3 D001               AND #01h
    80A5 194B84             JPZ _failRTS
    80A8 320E80             LDAA VAR_minutes
    80AB 70FF               CMP #FFh
    80AD 194B84             JPZ _failRTS
    80B0 104984             JMP _RTS
                
                ;Function '03h' = Get hours (OUTPUT = Accu), Carry = 0 if successfull 
                func_getHours
    80B3 320980             LDAA FLG_synced
    80B6 184B84             JNZ _failRTS
    80B9 320B80             LDAA VAR_dataOK
    80BC D002               AND #02h
    80BE 194B84             JPZ _failRTS
    80C1 320F80             LDAA VAR_hours
    80C4 70FF               CMP #FFh
    80C6 194B84             JPZ _failRTS
    80C9 104984             JMP _RTS        
                
                ;Function '04h' = Get day (OUTPUT = Accu), Carry = 0 if successfull 
                func_getDay
    80CC 320980             LDAA FLG_synced
    80CF 184B84             JNZ _failRTS
    80D2 320B80             LDAA VAR_dataOK
    80D5 D004               AND #04h
    80D7 194B84             JPZ _failRTS
    80DA 321080             LDAA VAR_day
    80DD 70FF               CMP #FFh
    80DF 194B84             JPZ _failRTS
    80E2 104984             JMP _RTS    
                
                ;Function '05h' = Get weekday (OUTPUT = Accu), Carry = 0 if successfull 
                ;1 = monday, 2 = tuesday, 3 = wednesday, 4 = thursday, 5 = friday, 6 = saturday, 7 = sunday
                func_getWeekday
    80E5 320980             LDAA FLG_synced
    80E8 184B84             JNZ _failRTS
    80EB 320B80             LDAA VAR_dataOK
    80EE D004               AND #04h
    80F0 194B84             JPZ _failRTS
    80F3 321180             LDAA VAR_weekday
    80F6 70FF               CMP #FFh
    80F8 194B84             JPZ _failRTS
    80FB 104984             JMP _RTS   
                
                ;Function '06h' = Get month (OUTPUT = Accu), Carry = 0 if successfull 
                func_getMonth
    80FE 320980             LDAA FLG_synced
    8101 184B84             JNZ _failRTS
    8104 320B80             LDAA VAR_dataOK
    8107 D004               AND #04h
    8109 194B84             JPZ _failRTS
    810C 321280             LDAA VAR_month
    810F 70FF               CMP #FFh
    8111 194B84             JPZ _failRTS
    8114 104984             JMP _RTS     
                
                ;Function '07h' = Get year (OUTPUT = Accu), Carry = 0 if successfull 
                func_getYear
    8117 320980             LDAA FLG_synced
    811A 184B84             JNZ _failRTS
    811D 320B80             LDAA VAR_dataOK
    8120 D004               AND #04h
    8122 194B84             JPZ _failRTS
    8125 321380             LDAA VAR_year
    8128 70FF               CMP #FFh
    812A 194B84             JPZ _failRTS
    812D 104984             JMP _RTS
                
                ;Function '08h' = Get entrypoint of library         
                func_getEntryPoint
    8130 6C6B80             LPT #funcdispatch
    8133 104984             JMP _RTS
                
                ;--------------------------------------------------------- 
                ;Interrupt routines   
                ;---------------------------------------------------------       
                
                ;Receiver interrupt        
                int_dcf77
    8136 3001               LDA #1 
    8138 420880             STAA FLG_dcfReceiver ;Flank detected -> Set flag
    813B 7D0A80             INCA VAR_edgeCnt ;Count edges (For signal error detection)
    813E 1F                 RTS       
                
                ;Timer interrupt
                int_timer
                            ;Measure time between two edges
    813F 320880             LDA FLG_dcfReceiver
    8142 184881             JNZ decode       
    8145 7C10               INC ZP_temp1
    8147 1F                 RTS
                
                ;--------------------------------------------------------- 
                ;DCF77 decoding   
                ;---------------------------------------------------------
                decode 
                ;From this point no interrupt should break the programm
    8148 05                 SEC
    8149 1BA802             JSR (KERN_SPINLOCK) ;"You shall not pass"           
                
                ;Synchronize with signal -> Detect syncpoint/-gap
    814C 3110               LDA ZP_temp1
    814E 7028               CMP #PARAM_SYNCPAUSE  
    8150 165F81             JNC _dec0
                ;Time >= PARAM_SYNCPAUSE -> Time longer than 1 second
                ;Syncpoint reached
    8153 2F0980             STZ FLG_synced
    8156 2F0D80             STZ VAR_second
    8159 2F0A80             STZ VAR_edgeCnt
    815C 109C83             JMP _decEnd
                
                ;Time < PARAM_SYNCPAUSE -> New second or bit information     
                ;Count seconds, Check signal for errors   
    815F 7014   _dec0       CMP #PARAM_SECOND 
    8161 166A81             JNC newBit
                            ;Time >= PARAM_SECOND -> Next second
    8164 7D0D80             INCA VAR_second  
    8167 109C83             JMP _decEnd
                
                ;Time < PARAM_SECOND -> New bit 
                newBit 
                ;Display synced status on I/O-Module LEDs
    816A 1AA783             JSR syncDisp
                ;Display synced status on SCC-Board
                ;First do signal checking -> Twice as many edges+1 as seconds?
    816D 320A80             LDAA VAR_edgeCnt
    8170 05                 SEC
    8171 9001               SBC #1
    8173 B002               DIV #2
    8175 720D80             CMPA VAR_second
    8178 198981             JPZ _nBit0 ;Check successfull -> Go forward to bit checking
                
                ;No longer synchronized        
                deSync  
    817B 3001               LDA #1 
    817D 420980             STAA FLG_synced
    8180 2F0B80             STZ VAR_dataOK
    8183 2F1B80             STZ VAR_ledsDataOK
    8186 109C83             JMP _decEnd
                
                ;Decode bit     
                _nBit0  
    8189 320D80             LDAA VAR_second
    818C 18D481             JNZ _nBit3
    818F 1A1A84             JSR getBit
    8192 187B81             JNZ deSync ;If Bit 0 != 0 -> Not synchronized or incorrect signal
                
                ;Second/bit = 0 -> Take over data from last minute            
    8195 320B80             LDAA VAR_dataOK
    8198 D001               AND #01h
    819A 19A381             JPZ _nBit1
    819D 321580             LDAA VAR_tmpMinutes ;Take over 'minutes'
    81A0 420E80             STAA VAR_minutes
    81A3 320B80 _nBit1      LDAA VAR_dataOK
    81A6 D002               AND #02h
    81A8 19B181             JPZ _nBit2
    81AB 321680             LDAA VAR_tmpHours ;Take over 'hours'
    81AE 420F80             STAA VAR_hours
    81B1 320B80 _nBit2      LDAA VAR_dataOK
    81B4 D004               AND #04h
    81B6 199C83             JPZ _decEnd
    81B9 321880             LDAA VAR_tmpWeekday ;Take over 'weekday'
    81BC 421180             STAA VAR_weekday
    81BF 321780             LDAA VAR_tmpDay ;Take over 'day'
    81C2 421080             STAA VAR_day
    81C5 321980             LDAA VAR_tmpMonth ;Take over 'month'
    81C8 421280             STAA VAR_month
    81CB 321A80             LDAA VAR_tmpYear ;Take over 'year'
    81CE 421380             STAA VAR_year
    81D1 109C83             JMP _decEnd
                
    81D4 7014   _nBit3      CMP #20
    81D6 169C83             JNC _decEnd ;Below bit 20 is nothing important
    81D9 18E581             JNZ _nBit4
    81DC 1A1A84             JSR getBit; Second/bit = 20 -> Begin of time information always '1'
    81DF 197B81             JPZ deSync ;If Bit 20 != 1 -> Not synchronized or incorrect signal
    81E2 109C83             JMP _decEnd
                
                ;Bit >20 - Get/decode data
    81E5 320980 _nBit4      LDAA FLG_synced
    81E8 189C83             JNZ _decEnd
                            ;Only continue if synchronized
    81EB 320D80             LDAA VAR_second
    81EE 701D               CMP #29
    81F0 161882             JNC getMinutes ;Go to minute decoding
                            ;Second >= 29
    81F3 7024               CMP #36
    81F5 166582             JNC getHours ;Go to hour decoding
                            ;Second >= 36
    81F8 702A               CMP #42
    81FA 16B482             JNC getDay ;Go to day decoding
                            ;Second >= 42
    81FD 702D               CMP #45
    81FF 16E482             JNC getWDay ;Go to weekday decoding
                            ;Second >= 45
    8202 7032               CMP #50
    8204 161883             JNC getMonth ;Go to month decoding
                            ;Second >= 50
    8207 703B               CMP #59
    8209 164C83             JNC getYear ;Go to year decoding
    820C 189C83             JNZ _decEnd
                            ;Second = 59 -> Leap second!
    820F 1A1A84             JSR getBit ;Always '0'
    8212 187B81             JNZ deSync 
    8215 109C83             JMP _decEnd
                
                ;Get/decode minutes
                ;---------------------------------------------------------
                getMinutes   
    8218 701C               CMP #28
    821A 193082             JPZ parityMinutes ;Last bit -> Check parity
    821D 7015               CMP #21
    821F 182582             JNZ _gMin0
    8222 481100             MOV ZP_temp1+1,#0 ;First bit -> Clear data
                
                ;Get bit (minutes)
    8225 1A1A84 _gMin0      JSR getBit
    8228 E111               ORA ZP_temp1+1
    822A DB                 SHR
    822B 4111               STA ZP_temp1+1
    822D 109C83             JMP _decEnd
                
                ;Last bit
                ;Check parity (minutes)        
                parityMinutes  
    8230 1A1A84             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    8233 08                 PHA
                            ;Determine if bitcount of data is even or odd
    8234 3111               LDA ZP_temp1+1
    8236 5007               LDX #7
    8238 2E                 CLY
    8239 1A2684             JSR bitCnt
    823C 174E82             JPC _pMin0   
    823F 0C                 PLA ;Bit count = "odd"
    8240 185282             JNZ _pMinOK
                
    8243 3006   _pMinBAD    LDA #06h ;Parity n.OK
    8245 D20B80             ANDA VAR_dataOK
    8248 420B80             STAA VAR_dataOK
    824B 109C83             JMP _decEnd
                
    824E 0C     _pMin0      PLA ;Bit count = "even"
    824F 184382             JNZ _pMinBAD
                
    8252 3111   _pMinOK     LDA ZP_temp1+1 ;Parity OK
    8254 1A3B84             JSR bcdToDec
    8257 421580             STAA VAR_tmpMinutes
    825A 3001               LDA #01h
    825C E20B80             ORAA VAR_dataOK
    825F 420B80             STAA VAR_dataOK
    8262 109C83             JMP _decEnd
                
                ;Get/decode hours
                ;---------------------------------------------------------
                getHours
    8265 7023               CMP #35
    8267 197D82             JPZ parityHours ;Last bit -> Check parity
    826A 701D               CMP #29
    826C 187282             JNZ _gHrs0
    826F 481100             MOV ZP_temp1+1,#0 ;First Bit -> Clear data
                
                ;Get bit (hours)
    8272 1A1A84 _gHrs0      JSR getBit
    8275 E111               ORA ZP_temp1+1
    8277 DB                 SHR
    8278 4111               STA ZP_temp1+1 
    827A 109C83             JMP _decEnd
                
                ;Last bit
                ;Check parity (hours)         
                parityHours       
    827D BC11               SHR ZP_temp1+1 ;Shift data right by 1
                
    827F 1A1A84             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    8282 08                 PHA
                            ;Determine if bitcount of data is even or odd
    8283 3111               LDA ZP_temp1+1  
    8285 5006               LDX #6
    8287 2E                 CLY
    8288 1A2684             JSR bitCnt
    828B 179D82             JPC _pHrs0   
    828E 0C                 PLA ;Bit count = "odd"
    828F 18A182             JNZ _pHrsOK
                
    8292 3005   _pHrsBAD    LDA #05h ;Parity n.OK
    8294 D20B80             ANDA VAR_dataOK
    8297 420B80             STAA VAR_dataOK
    829A 109C83             JMP _decEnd
                
    829D 0C     _pHrs0      PLA ;Bit count = "even"
    829E 189282             JNZ _pHrsBAD
                
    82A1 3111   _pHrsOK     LDA ZP_temp1+1 ;Parity OK
    82A3 1A3B84             JSR bcdToDec
    82A6 421680             STAA VAR_tmpHours
    82A9 3002               LDA #02h
    82AB E20B80             ORAA VAR_dataOK
    82AE 420B80             STAA VAR_dataOK
    82B1 109C83             JMP _decEnd
                
                ;Get/decode day
                ;---------------------------------------------------------
                getDay  
    82B4 7024               CMP #36 
    82B6 18BC82             JNZ _gDay0
    82B9 481100             MOV ZP_temp1+1,#0 ;First Bit -> Clear data
                
                ;Get bit (day)      
    82BC 1A1A84 _gDay0      JSR getBit
    82BF E111               ORA ZP_temp1+1
    82C1 DB                 SHR
    82C2 4111               STA ZP_temp1+1  
                            ;Check for last bit
    82C4 320D80             LDAA VAR_second
    82C7 7029               CMP #41       
    82C9 189C83             JNZ _decEnd 
                
                ;Last bit
    82CC BC11               SHR ZP_temp1+1 ;Shift data right by 1 
                
                            ;Count high bits and add it to "VAR_dateParity"
    82CE 3111               LDA ZP_temp1+1  
    82D0 5006               LDX #6
    82D2 2E                 CLY
    82D3 1A2684             JSR bitCnt
    82D6 421480             STAA VAR_dateParity
                            ;Save day value
    82D9 3111               LDA ZP_temp1+1
    82DB 1A3B84             JSR bcdToDec
    82DE 421780             STAA VAR_tmpDay
    82E1 109C83             JMP _decEnd        
                
                ;Get/decode weekday
                ;---------------------------------------------------------
                getWDay 
    82E4 702A               CMP #42
    82E6 18EC82             JNZ _getWDay0
    82E9 481100             MOV ZP_temp1+1,#0 ;First Bit -> Clear data
                
                ;Get bit (weekday)    
    82EC 1A1A84 _getWDay0   JSR getBit
    82EF E111               ORA ZP_temp1+1
    82F1 DB                 SHR
    82F2 4111               STA ZP_temp1+1 
                            ;Check for last bit
    82F4 320D80             LDAA VAR_second
    82F7 702C               CMP #44       
    82F9 189C83             JNZ _decEnd
                
                ;Last bit
                            ;Shift data right by 4
    82FC 3111               LDA ZP_temp1+1 
    82FE B010               DIV #10h
    8300 4111               STA ZP_temp1+1 
                
                            ;Count high bits and add it to "VAR_dateParity"
    8302 5003               LDX #3
    8304 591480             LDYA VAR_dateParity
    8307 1A2684             JSR bitCnt
    830A 421480             STAA VAR_dateParity
                            ;Save weekday value
    830D 3111               LDA ZP_temp1+1 
    830F 1A3B84             JSR bcdToDec
    8312 421880             STAA VAR_tmpWeekday
    8315 109C83             JMP _decEnd  
                
                ;Get/decode month
                ;---------------------------------------------------------
                getMonth    
    8318 702D               CMP #45
    831A 182083             JNZ _gMon0
    831D 481100             MOV ZP_temp1+1 ,#0 ;First Bit -> Clear data
                
                ;Get bit (month)
    8320 1A1A84 _gMon0      JSR getBit
    8323 E111               ORA ZP_temp1+1 
    8325 DB                 SHR
    8326 4111               STA ZP_temp1+1  
                            ;Check for last bit
    8328 320D80             LDAA VAR_second
    832B 7031               CMP #49       
    832D 189C83             JNZ _decEnd 
                
                ;Last bit
                            ;Shift data right by 2
    8330 BC11               SHR ZP_temp1+1   
    8332 BC11               SHR ZP_temp1+1  
                
                            ;Count high bits and add it to "VAR_dateParity"
    8334 3111               LDA ZP_temp1+1   
    8336 5005               LDX #5
    8338 591480             LDYA VAR_dateParity
    833B 1A2684             JSR bitCnt
    833E 421480             STAA VAR_dateParity
                            ;Save month value
    8341 3111               LDA ZP_temp1+1 
    8343 1A3B84             JSR bcdToDec
    8346 421980             STAA VAR_tmpMonth
    8349 109C83             JMP _decEnd 
                
                ;Get/decode year
                ;---------------------------------------------------------
                getYear     
    834C 703A               CMP #58
    834E 196583             JPZ parityDate ;Last bit -> Check parity
    8351 7032               CMP #50
    8353 185983             JNZ _gYear0
    8356 481100             MOV ZP_temp1+1 ,#0 ;First Bit -> Clear data
                
                ;Get bit (year)
    8359 BC11   _gYear0     SHR ZP_temp1+1 
    835B 1A1A84             JSR getBit
    835E E111               ORA ZP_temp1+1 
    8360 4111               STA ZP_temp1+1  
    8362 109C83             JMP _decEnd
                
                ;Last bit
                ;Check parity for whole date (Day, weekday, month, year)         
                parityDate
    8365 1A1A84             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    8368 08                 PHA
                            ;Count high bits and add it to "VAR_dateParity"
                            ;Determine if bitcount of "VAR_dateParity" is even or odd
    8369 3111               LDA ZP_temp1+1 
    836B 5008               LDX #8
    836D 591480             LDYA VAR_dateParity
    8370 1A2684             JSR bitCnt
    8373 178583             JPC _pDat0
    8376 0C                 PLA ;Bit count = "odd" 
    8377 188983             JNZ _pDateOK
                
    837A 3003   _pDateBAD   LDA #03h ;Partity n.OK
    837C D20B80             ANDA VAR_dataOK
    837F 420B80             STAA VAR_dataOK
    8382 109C83             JMP _decEnd
                
    8385 0C     _pDat0      PLA ;Bit count = "even"
    8386 187A83             JNZ _pDateBAD
                
    8389 3111   _pDateOK    LDA ZP_temp1+1  ;Parity OK
    838B 1A3B84             JSR bcdToDec
    838E 421A80             STAA VAR_tmpYear ;Save year value
    8391 3004               LDA #04h
    8393 E20B80             ORAA VAR_dataOK
    8396 420B80             STAA VAR_dataOK
    8399 109C83             JMP _decEnd
                
                ;Ready for next bit
                _decEnd
    839C 2F0880             STZ FLG_dcfReceiver ;Reset dcf77 interrupt flag 
    839F 481000             MOV ZP_temp1, #0 ;Reset Edge time
    83A2 04                 CLC
    83A3 1BA802             JSR (KERN_SPINLOCK) ;Enable the interrupts again
    83A6 1F                 RTS
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on Multi-I/O LEDs   
                ;---------------------------------------------------------
                syncDisp
                ;Display synced status           
    83A7 320980             LDAA FLG_synced
    83AA 19B883             JPZ _syncD0
    83AD 3008               LDA #08h 
    83AF F21B80             EORA VAR_ledsDataOK
    83B2 421B80             STAA VAR_ledsDataOK
    83B5 101084             JMP _syncD4
    83B8 3008   _syncD0     LDA #08h 
    83BA E21B80             ORAA VAR_ledsDataOK
    83BD 421B80             STAA VAR_ledsDataOK
                
    83C0 320D80             LDAA VAR_second
    83C3 7015               CMP #21
    83C5 161084             JNC _syncD4 ;Second <21 -> No time information fetching
    83C8 701D               CMP #29
    83CA 16DA83             JNC _syncD1 ;Second >= 21 & <29 -> Fetching minutes
    83CD 7024               CMP #36
    83CF 16ED83             JNC _syncD2 ;Second >= 29 & < 36 -> Fetching hours
    83D2 703B               CMP #59
    83D4 160084             JNC _syncD3 ;Second >= 36 & < 59 -> Fetching date
    83D7 101084             JMP _syncD4
                
                ;Fetching minutes
    83DA 320B80 _syncD1     LDAA VAR_dataOK
    83DD D001               AND #01h
    83DF 181084             JNZ _syncD4
    83E2 3001               LDA #01h 
    83E4 F21B80             EORA VAR_ledsDataOK
    83E7 421B80             STAA VAR_ledsDataOK
    83EA 101084             JMP _syncD4
                
                ;Fetching hours
    83ED 320B80 _syncD2     LDAA VAR_dataOK
    83F0 D002               AND #02h
    83F2 181084             JNZ _syncD4
    83F5 3002               LDA #02h 
    83F7 F21B80             EORA VAR_ledsDataOK
    83FA 421B80             STAA VAR_ledsDataOK
    83FD 101084             JMP _syncD4
                
                ;Fetching date 
    8400 320B80 _syncD3     LDAA VAR_dataOK
    8403 D004               AND #04h
    8405 181084             JNZ _syncD4
    8408 3004               LDA #04h 
    840A F21B80             EORA VAR_ledsDataOK
    840D 421B80             STAA VAR_ledsDataOK
                
    8410 320B80 _syncD4     LDAA VAR_dataOK
    8413 E21B80             ORAA VAR_ledsDataOK
    8416 1B0603             JSR (KERN_IOCHANGELED)
    8419 1F                 RTS
                
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on SCC-Board   
                ;---------------------------------------------------------
                
                ;--------------------------------------------------------- 
                ;Helper functions   
                ;---------------------------------------------------------
                
                ;Get bit information from Time (Output: A = High(80h), Low(00h))        
                getBit      
    841A 3110               LDA ZP_temp1
    841C 7004               CMP #PARAM_LOWHIGH
    841E 162484             JNC _gBit0
                            ;Time >= PARAM_LOWHIGH -> Bit = 1
    8421 3080               LDA #80h
    8423 4D                 SKA
    8424 2C     _gBit0      CLA ;Time < PARAM_LOWHIGH -> Bit = 0
    8425 1F                 RTS
                
                ;Count high bits
                ;Input: A = Byte, X = Number of bits, Y = Counter offset
                ;Output: A = Counter value, Carry = 0 -> odd, Carry = 1 -> even
                bitCnt
    8426 DB     _bCnt0      SHR
    8427 162B84             JNC _bCnt1
    842A 8B                 INY
    842B 492684 _bCnt1      DXJP _bCnt0
    842E 29                 SAY
    842F 08                 PHA
    8430 C002               MOD #2
    8432 193784             JPZ _bCnt2
    8435 04                 CLC ;Counter value "odd"
    8436 4D                 SKA
    8437 05     _bCnt2      SEC ;Counter value "even"
    8438 0C                 PLA
    8439 1F                 RTS
                
                ;Convert BCD to decimal (Input: A = BCD value) (Output: A = decimal vlaue) 
    843A 00     VAR_tmpConvert  DB  0      
                bcdToDec
    843B 08                 PHA
    843C B010               DIV #10h
    843E A00A               MUL #0Ah
    8440 4111               STA ZP_temp1+1
    8442 0C                 PLA
    8443 D00F               AND #0Fh
    8445 04                 CLC
    8446 8111               ADC ZP_temp1+1
    8448 1F                 RTS
                
                _RTS    
    8449 04                 CLC
    844A 1F                 RTS
                
                _failRTS
    844B 2C                 CLA
    844C 05                 SEC
    844D 1F                 RTS
                
                


Segment Table:
**************
Segment Name                 Startaddr  Endaddr     Size  Type
=========================================================================
default                           8000     844D      44E  CODE  fixed
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

No errors found.
