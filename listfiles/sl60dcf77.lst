                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                ;~~  [MyCA] Macro Cross Assembler V1.08 for MyCPU, (c) 2018 by Dennis Kuschel  ~~
                ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                ;[File: sl60dcf77.asm]
                ;[ASCII]
                ;******************************************
                ;***********  DCF77 Library  **************
                ;******************************************
                ;******  by Robin TÃ¶nniges (2017)  ********
                ;******************************************
                
                ;[File: C:\Program Files (x86)\myca\include\sys.hsm]
                ;[ASCII]
                
                KERN_WARMSTART      EQU 0220h
                KERN_FILEINPUT      EQU 027Ah
                KERN_GETINFO        EQU 02A2h
                KERN_REGFILEDEVICE  EQU 0264h
                KERN_FSREGISTER     EQU 02AEh
                KERN_FSUNREGISTER   EQU 02B0h
                KERN_GETCHECKSUM16  EQU 02B2h
                KERN_SETMEMBORDERS  EQU 029Eh
                KERN_SETIDLEFUNC    EQU 02EAh
                KERN_IDLE           EQU 02ECh
                KERN_TESTVERSION    EQU 030Ch
                KERN_CONFIGBYTE     EQU 030Ah
                KERN_IDEDRIVER      EQU 030Eh
                KERN_MULTIPLEX      EQU 0312h
                KERN_PRGMOVE        EQU 032Ah
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                ;[ASCII]
                
                ;[File: C:\Program Files (x86)\myca\include\code.hsm]
                ;[ASCII]
                
                KERN_ADAPTOPCODES   EQU 02C4h
                KERN_EXECUTEFILE    EQU 02BEh
                KERN_EXITTSR        EQU 02C2h
                KERN_KILLPROGRAM    EQU 02C0h
                KERN_KILLPROGEX     EQU 0328h
                KERN_SPECROMCALL    EQU 02B6h
                KERN_CALLFROMROM    EQU 02B8h
                KERN_CALLROM        EQU 02BAh
                KERN_LIBCALL        EQU 02CAh
                KERN_LIBSELECT      EQU 02CCh
                KERN_LIBDESELECT    EQU 02CEh
                KERN_LIBUNLOAD      EQU 02D0h
                KERN_ISLOADED       EQU 02D2h
                KERN_ASSERT         EQU 0326h
                
                REG_ROMPAGE  SET 3900h
                
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                
                ORG 8000h
    8000 0280    DW 8002h
    8002 1D80    DW disp__func
    8004 5480    DW termfunc
    8006 1D80    DW codestart
                
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\code.hsm]
                ;[ASCII]
                ;[File: sl60dcf77.asm]
                ;[File: C:\Program Files (x86)\myca\include\interrupt.hsm]
                ;[ASCII]
                
                KERN_IC_ENABLEINT   EQU 0222h
                KERN_IC_DISABLEINT  EQU 0224h
                KERN_IC_GETVECTOR   EQU 0226h
                KERN_IC_SETVECTOR   EQU 0228h
                KERN_IC_REGISTERBH  EQU 022Ah
                KERN_SPINLOCK       EQU 02A8h
                KERN_INTVECT        EQU 0332h
                
                KERN_INSDELTIMER    EQU 02AAh
                
                ;[File: sl60dcf77.asm]
                ;Comment this line in if you want synced status on Multi-I/O-LEDs
                ;Comment this line out if you dont use the SCC-Rack-Extension
                
                ;-------------------------------------;
                ; declare variables
                
                ;Zeropointer
                ZP_temp1            EQU  08h
                
                ;Addresses
                HDW_INT             EQU 7       ;IRQ7
                HDW_SCC_BOARD       EQU 3000h   ;Address of SCC board
                KERN_IOCHANGELED    EQU 0306h   ;Kernel routine for changing the Multi-I/O-LEDs
                
                ;Decoding parameter
                ;Low        = 100ms         is theoretically 3
                ;High       = 200ms         is theoretically 6
                ;Syncpause  = 1800-1900ms   is theoretically 54-57
                ;New second = 800-900ms     is theoretically 24-27
                PARAM_LOWHIGH       SET 4       ;Edge time < PARAM_LOWHIGH      = 0(Low),           >= PARAM_LOWHIGH    = 1(High)
                PARAM_SYNCPAUSE     SET 50      ;Edge time < PARAM_SYNCPAUSE    = New second/bit,   >= PARAM_SYNCPAUSE  = Syncpoint
                PARAM_SECOND        SET 20      ;Edge time < PARAM_SECOND       = New bit,          >= PARAM_SECOND     = New second
                PARAM_IGNORE        SET 1       ;Edge time < PARAM_IGNORE       = Signal interference (ignore)
                
                ;Variables
    8008 01     FLG_dcfReceiver     DB  1   ;This flag is set to 1 if new input (rising edge) comes from the DCF77-Receiver
    8009 01     FLG_synced          DB  1   ;Sync flag -> 0 if synchron with dcf77
    800A 00     VAR_edgeCnt         DB  0   ;Edge counter
    800B 00     VAR_dataOK          DB  0   ;Parity check -> Bit 1 = Minutes OK, Bit 2 = Hours OK, Bit 3 = Date OK
                
    800C 00     VAR_pSecond         DB  0   ;Pseudo second to bridge desynchronization
    800D 00     VAR_second          DB  0   ;DCF77-Second/Bit counter
                
                ;Time variables initialized with FFh to "lock" Get-functions until 2nd synchronization point reached
    800E FF     VAR_minutes         DB  FFh
    800F FF     VAR_hours           DB  FFh
                
    8010 FF     VAR_day             DB  FFh
    8011 FF     VAR_weekday         DB  FFh
    8012 FF     VAR_month           DB  FFh
    8013 FF     VAR_year            DB  FFh
                
    8014 00     VAR_dateParity      DB  0
                
    8015 00     VAR_tmpMinutes      DB  0
    8016 00     VAR_tmpHours        DB  0
    8017 00     VAR_tmpDay          DB  0
    8018 00     VAR_tmpWeekday      DB  0
    8019 00     VAR_tmpMonth        DB  0
    801A 00     VAR_tmpYear         DB  0
    801B 00     VAR_ledsDataOK      DB  0
                
    801C 00     VAR_timerhandle     DB  0   ;Address of timer interrupt handle
                
                ;-------------------------------------;
                ; begin of assembly code
                
                codestart
                ;[File: C:\Program Files (x86)\myca\include\library.hsm]
                ;[ASCII]
                
                disp__func
    801D E000      ORA #0
    801F 187380    JNZ funcdispatch
    8022 04        CLC
    8023 1BD202    JSR (KERN_ISLOADED)
    8026 2C        CLA
    8027 173480    JPC exit_lib
    802A 1A3580    JSR initfunc
    802D 20        TAX
    802E 183480    JNZ exit_lib
    8031 11C202    JMP (KERN_EXITTSR)
                exit_lib
    8034 1F        RTS
                
                ;[File: sl60dcf77.asm]
                ;--------------------------------------------------------- 
                ;Library handling  
                ;---------------------------------------------------------  
                
                ;Library initialization
                ;---------------------------------------------------------   
                initfunc
                
                ;Initialize zeropage variables
    8035 3C08               FLG  ZP_temp1   ;Time between two interrupts (Value * 1/30.517578Hz)s 
    8037 3C09               FLG  ZP_temp1+1 ;Temporary data
                
                ;Enable hardware interrupt (IRQ7)
    8039 3007               LDA  #HDW_INT
    803B 6C6681             LPT  #int_dcf77
    803E 1B2802             JSR  (KERN_IC_SETVECTOR)
    8041 1B2202             JSR  (KERN_IC_ENABLEINT)
                
                ;Enable timer interrupt
    8044 2C                 CLA    
    8045 6C6F81             LPT  #int_timer
    8048 1B1203             JSR  (KERN_MULTIPLEX)
    804B 421C80             STAA VAR_timerhandle  ;Save adress of timerhandle  
                
                ;If sync display enabled clear LEDs 
    804E 2C                 CLA
    804F 1B0603             JSR (KERN_IOCHANGELED)
    8052 2C                 CLA
    8053 1F                 RTS
                
                ;Termination function
                ;---------------------------------------------------------                  
                termfunc  
                            ;Disable timer-interrupt
    8054 3001               LDA  #1
    8056 521C80             LDXA VAR_timerhandle      
    8059 1B1203             JSR (KERN_MULTIPLEX)
                            ;Disable hardware-interrupt
    805C 3007               LDA #HDW_INT
    805E 1B2402             JSR (KERN_IC_DISABLEINT)
                            ;Disable spinlock
    8061 04                 CLC
    8062 1BA802             JSR (KERN_SPINLOCK)
                            ;Set LEDs to default
    8065 30FF               LDA #0FFh
    8067 1B0603             JSR (KERN_IOCHANGELED)
    806A 320030             LDAA HDW_SCC_BOARD
    806D D0FB               AND #FBh
    806F 420030             STAA HDW_SCC_BOARD
    8072 1F                 RTS
                
                ;Functiondispatch
                ;---------------------------------------------------------     
                funcdispatch
    8073 9B                 DEC
    8074 19A680             JPZ func_getSeconds     ;Function 01h  
    8077 9B                 DEC 
    8078 19B280             JPZ func_getMinutes     ;Function 02h         
    807B 9B                 DEC 
    807C 19CB80             JPZ func_getHours       ;Function 03h 
    807F 9B                 DEC 
    8080 19E480             JPZ func_getDay         ;Function 04h   
    8083 9B                 DEC 
    8084 19FD80             JPZ func_getWeekday     ;Function 05h       
    8087 9B                 DEC 
    8088 191681             JPZ func_getMonth       ;Function 06h      
    808B 9B                 DEC 
    808C 192F81             JPZ func_getYear        ;Function 07h 
    808F 9B                 DEC 
    8090 194881             JPZ func_getEntryPoint  ;Function 08h
    8093 9B     			DEC 
    8094 194E81             JPZ func_getBitCount  	;Function 09h
    8097 9B     			DEC 
    8098 195481             JPZ func_getEdgeCount  	;Function 0Ah
    809B 9B     			DEC 
    809C 195A81             JPZ func_getSyncFlag  	;Function 0Bh
    809F 9B     			DEC 
    80A0 196081             JPZ func_getEdgeFlag  	;Function 0Ch
    80A3 10C484             JMP _failRTS
                
                ;Function '01h' = Get seconds (OUTPUT = Accu), Carry = 0 if successfull
                func_getSeconds
    80A6 320980             LDAA FLG_synced
    80A9 18C484             JNZ _failRTS
    80AC 320D80             LDAA VAR_second
    80AF 10C284             JMP _RTS
                
                ;Function '02h' = Get minutes (OUTPUT = Accu), Carry = 0 if successfull         
                func_getMinutes  
    80B2 320980             LDAA FLG_synced
    80B5 18C484             JNZ _failRTS
    80B8 320B80             LDAA VAR_dataOK
    80BB D001               AND #01h
    80BD 19C484             JPZ _failRTS
    80C0 320E80             LDAA VAR_minutes
    80C3 70FF               CMP #FFh
    80C5 19C484             JPZ _failRTS
    80C8 10C284             JMP _RTS
                
                ;Function '03h' = Get hours (OUTPUT = Accu), Carry = 0 if successfull 
                func_getHours
    80CB 320980             LDAA FLG_synced
    80CE 18C484             JNZ _failRTS
    80D1 320B80             LDAA VAR_dataOK
    80D4 D002               AND #02h
    80D6 19C484             JPZ _failRTS
    80D9 320F80             LDAA VAR_hours
    80DC 70FF               CMP #FFh
    80DE 19C484             JPZ _failRTS
    80E1 10C284             JMP _RTS        
                
                ;Function '04h' = Get day (OUTPUT = Accu), Carry = 0 if successfull 
                func_getDay
    80E4 320980             LDAA FLG_synced
    80E7 18C484             JNZ _failRTS
    80EA 320B80             LDAA VAR_dataOK
    80ED D004               AND #04h
    80EF 19C484             JPZ _failRTS
    80F2 321080             LDAA VAR_day
    80F5 70FF               CMP #FFh
    80F7 19C484             JPZ _failRTS
    80FA 10C284             JMP _RTS    
                
                ;Function '05h' = Get weekday (OUTPUT = Accu), Carry = 0 if successfull 
                ;1 = monday, 2 = tuesday, 3 = wednesday, 4 = thursday, 5 = friday, 6 = saturday, 7 = sunday
                func_getWeekday
    80FD 320980             LDAA FLG_synced
    8100 18C484             JNZ _failRTS
    8103 320B80             LDAA VAR_dataOK
    8106 D004               AND #04h
    8108 19C484             JPZ _failRTS
    810B 321180             LDAA VAR_weekday
    810E 70FF               CMP #FFh
    8110 19C484             JPZ _failRTS
    8113 10C284             JMP _RTS   
                
                ;Function '06h' = Get month (OUTPUT = Accu), Carry = 0 if successfull 
                func_getMonth
    8116 320980             LDAA FLG_synced
    8119 18C484             JNZ _failRTS
    811C 320B80             LDAA VAR_dataOK
    811F D004               AND #04h
    8121 19C484             JPZ _failRTS
    8124 321280             LDAA VAR_month
    8127 70FF               CMP #FFh
    8129 19C484             JPZ _failRTS
    812C 10C284             JMP _RTS     
                
                ;Function '07h' = Get year (OUTPUT = Accu), Carry = 0 if successfull 
                func_getYear
    812F 320980             LDAA FLG_synced
    8132 18C484             JNZ _failRTS
    8135 320B80             LDAA VAR_dataOK
    8138 D004               AND #04h
    813A 19C484             JPZ _failRTS
    813D 321380             LDAA VAR_year
    8140 70FF               CMP #FFh
    8142 19C484             JPZ _failRTS
    8145 10C284             JMP _RTS
                
                ;Function '08h' = Get entrypoint of library         
                func_getEntryPoint
    8148 6C7380             LPT #funcdispatch
    814B 10C284             JMP _RTS
                
                ;Function '09h' = Get bit counter (OUTPUT = Accu), Carry = 0 if successfull
                func_getBitCount
    814E 320D80             LDAA VAR_second
    8151 10C284             JMP _RTS
                
                ;Function '0Ah' = Get edge counter (OUTPUT = Accu), Carry = 0 if successfull
                func_getEdgeCount
    8154 320A80             LDAA VAR_edgeCnt
    8157 10C284             JMP _RTS
                
                ;Function '0Bh' = Get sync flag (OUTPUT = Accu), Carry = 0 if successfull
                func_getSyncFlag
    815A 320980             LDAA FLG_synced
    815D 10C284             JMP _RTS
                
                ;Function '0Ch' = Get edge flag (OUTPUT = Accu), Carry = 0 if successfull
                func_getEdgeFlag
    8160 320A80             LDAA VAR_edgeCnt
    8163 10C284             JMP _RTS
                
                ;--------------------------------------------------------- 
                ;Interrupt routines   
                ;---------------------------------------------------------       
                
                ;Receiver interrupt        
                int_dcf77
    8166 3001               LDA #1 
    8168 420880             STAA FLG_dcfReceiver ;Flank detected -> Set flag
    816B 7D0A80             INCA VAR_edgeCnt ;Count edges (For signal error detection)
    816E 1F                 RTS       
                
                ;Timer interrupt
                int_timer
                            ;Measure time between two edges
    816F 320880             LDA FLG_dcfReceiver
    8172 187881             JNZ decode       
    8175 7C08               INC ZP_temp1
    8177 1F                 RTS
                
                ;--------------------------------------------------------- 
                ;DCF77 decoding   
                ;---------------------------------------------------------
                decode 
                ;From this point no interrupt should break the programm
    8178 05                 SEC
    8179 1BA802             JSR (KERN_SPINLOCK) ;"You shall not pass"           
                
                ;Synchronize with signal -> Detect syncpoint/-gap
    817C 3108               LDA ZP_temp1
    817E 7032               CMP #PARAM_SYNCPAUSE  
    8180 168F81             JNC _dec0
                ;Time >= PARAM_SYNCPAUSE -> Time longer than 1 second
                ;Syncpoint reached
    8183 2F0980             STZ FLG_synced
    8186 2F0D80             STZ VAR_second
    8189 2F0A80             STZ VAR_edgeCnt
    818C 10DC83             JMP _decEnd
                
                ;Time < PARAM_SYNCPAUSE -> New second or bit information     
                ;Count seconds, Check signal for errors   
    818F 7001   _dec0       CMP #PARAM_IGNORE
    8191 179A81             JPC _dec1
    8194 8D0A80             DECA VAR_edgeCnt
    8197 10E783             JMP _decIgnore
    819A 7014   _dec1       CMP #PARAM_SECOND 
    819C 16A581             JNC newBit
                            ;Time >= PARAM_SECOND -> Next second
    819F 7D0D80             INCA VAR_second  
    81A2 10DC83             JMP _decEnd
                
                ;Time < PARAM_SECOND -> New bit 
                newBit 
                ;Display synced status on I/O-Module LEDs
    81A5 1AEF83             JSR syncDisp
                ;Display synced status on SCC-Board
    81A8 1A6284             JSR sccBoard
                ;First do signal checking -> Twice as many edges+1 as seconds?
    81AB 320A80             LDAA VAR_edgeCnt
    81AE 05                 SEC
    81AF 9001               SBC #1
    81B1 B002               DIV #2
    81B3 720D80             CMPA VAR_second
    81B6 19C981             JPZ _nBit0 ;Check successfull -> Go forward to bit checking
                
                ;No longer synchronized        
                deSync  
    81B9 3001               LDA #1 
    81BB 420980             STAA FLG_synced
    81BE 2F0B80             STZ VAR_dataOK
    81C1 3008               LDA #08
    81C3 421B80             STAA VAR_ledsDataOK
    81C6 10DC83             JMP _decEnd
                
                ;Decode bit     
    81C9 320980 _nBit0      LDAA FLG_synced
    81CC 18DC83             JNZ _decEnd
                            ;Only continue if synchronized
                
    81CF 320D80             LDAA VAR_second
    81D2 181A82             JNZ _nBit3
    81D5 1A9384             JSR getBit
    81D8 18B981             JNZ deSync ;If Bit 0 != 0 -> Not synchronized or incorrect signal
                
                ;Second/bit = 0 -> Take over data from last minute            
    81DB 320B80             LDAA VAR_dataOK
    81DE D001               AND #01h
    81E0 19E981             JPZ _nBit1
    81E3 321580             LDAA VAR_tmpMinutes ;Take over 'minutes'
    81E6 420E80             STAA VAR_minutes
    81E9 320B80 _nBit1      LDAA VAR_dataOK
    81EC D002               AND #02h
    81EE 19F781             JPZ _nBit2
    81F1 321680             LDAA VAR_tmpHours ;Take over 'hours'
    81F4 420F80             STAA VAR_hours
    81F7 320B80 _nBit2      LDAA VAR_dataOK
    81FA D004               AND #04h
    81FC 19DC83             JPZ _decEnd
    81FF 321880             LDAA VAR_tmpWeekday ;Take over 'weekday'
    8202 421180             STAA VAR_weekday
    8205 321780             LDAA VAR_tmpDay ;Take over 'day'
    8208 421080             STAA VAR_day
    820B 321980             LDAA VAR_tmpMonth ;Take over 'month'
    820E 421280             STAA VAR_month
    8211 321A80             LDAA VAR_tmpYear ;Take over 'year'
    8214 421380             STAA VAR_year
    8217 10DC83             JMP _decEnd
                
    821A 7014   _nBit3      CMP #20
    821C 16DC83             JNC _decEnd ;Below bit 20 is nothing important
    821F 182B82             JNZ _nBit4
    8222 1A9384             JSR getBit; Second/bit = 20 -> Begin of time information always '1'
    8225 19B981             JPZ deSync ;If Bit 20 != 1 -> Not synchronized or incorrect signal
    8228 10DC83             JMP _decEnd
                
                ;Bit >20 - Get/decode data
    822B 320D80 _nBit4      LDAA VAR_second
    822E 701D               CMP #29
    8230 165882             JNC getMinutes ;Go to minute decoding
                            ;Second >= 29
    8233 7024               CMP #36
    8235 16A582             JNC getHours ;Go to hour decoding
                            ;Second >= 36
    8238 702A               CMP #42
    823A 16F482             JNC getDay ;Go to day decoding
                            ;Second >= 42
    823D 702D               CMP #45
    823F 162483             JNC getWDay ;Go to weekday decoding
                            ;Second >= 45
    8242 7032               CMP #50
    8244 165883             JNC getMonth ;Go to month decoding
                            ;Second >= 50
    8247 703B               CMP #59
    8249 168C83             JNC getYear ;Go to year decoding
    824C 18DC83             JNZ _decEnd
                            ;Second = 59 -> Leap second!
    824F 1A9384             JSR getBit ;Always '0'
    8252 18B981             JNZ deSync 
    8255 10DC83             JMP _decEnd
                
                ;Get/decode minutes
                ;---------------------------------------------------------
                getMinutes   
    8258 701C               CMP #28
    825A 197082             JPZ parityMinutes ;Last bit -> Check parity
    825D 7015               CMP #21
    825F 186582             JNZ _gMin0
    8262 480900             MOV ZP_temp1+1,#0 ;First bit -> Clear data
                
                ;Get bit (minutes)
    8265 1A9384 _gMin0      JSR getBit
    8268 E109               ORA ZP_temp1+1
    826A DB                 SHR
    826B 4109               STA ZP_temp1+1
    826D 10DC83             JMP _decEnd
                
                ;Last bit
                ;Check parity (minutes)        
                parityMinutes  
    8270 1A9384             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    8273 08                 PHA
                            ;Determine if bitcount of data is even or odd
    8274 3109               LDA ZP_temp1+1
    8276 5007               LDX #7
    8278 2E                 CLY
    8279 1A9F84             JSR bitCnt
    827C 178E82             JPC _pMin0   
    827F 0C                 PLA ;Bit count = "odd"
    8280 189282             JNZ _pMinOK
                
    8283 3006   _pMinBAD    LDA #06h ;Parity n.OK
    8285 D20B80             ANDA VAR_dataOK
    8288 420B80             STAA VAR_dataOK
    828B 10DC83             JMP _decEnd
                
    828E 0C     _pMin0      PLA ;Bit count = "even"
    828F 188382             JNZ _pMinBAD
                
    8292 3109   _pMinOK     LDA ZP_temp1+1 ;Parity OK
    8294 1AB484             JSR bcdToDec
    8297 421580             STAA VAR_tmpMinutes
    829A 3001               LDA #01h
    829C E20B80             ORAA VAR_dataOK
    829F 420B80             STAA VAR_dataOK
    82A2 10DC83             JMP _decEnd
                
                ;Get/decode hours
                ;---------------------------------------------------------
                getHours
    82A5 7023               CMP #35
    82A7 19BD82             JPZ parityHours ;Last bit -> Check parity
    82AA 701D               CMP #29
    82AC 18B282             JNZ _gHrs0
    82AF 480900             MOV ZP_temp1+1,#0 ;First Bit -> Clear data
                
                ;Get bit (hours)
    82B2 1A9384 _gHrs0      JSR getBit
    82B5 E109               ORA ZP_temp1+1
    82B7 DB                 SHR
    82B8 4109               STA ZP_temp1+1 
    82BA 10DC83             JMP _decEnd
                
                ;Last bit
                ;Check parity (hours)         
                parityHours       
    82BD BC09               SHR ZP_temp1+1 ;Shift data right by 1
                
    82BF 1A9384             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    82C2 08                 PHA
                            ;Determine if bitcount of data is even or odd
    82C3 3109               LDA ZP_temp1+1  
    82C5 5006               LDX #6
    82C7 2E                 CLY
    82C8 1A9F84             JSR bitCnt
    82CB 17DD82             JPC _pHrs0   
    82CE 0C                 PLA ;Bit count = "odd"
    82CF 18E182             JNZ _pHrsOK
                
    82D2 3005   _pHrsBAD    LDA #05h ;Parity n.OK
    82D4 D20B80             ANDA VAR_dataOK
    82D7 420B80             STAA VAR_dataOK
    82DA 10DC83             JMP _decEnd
                
    82DD 0C     _pHrs0      PLA ;Bit count = "even"
    82DE 18D282             JNZ _pHrsBAD
                
    82E1 3109   _pHrsOK     LDA ZP_temp1+1 ;Parity OK
    82E3 1AB484             JSR bcdToDec
    82E6 421680             STAA VAR_tmpHours
    82E9 3002               LDA #02h
    82EB E20B80             ORAA VAR_dataOK
    82EE 420B80             STAA VAR_dataOK
    82F1 10DC83             JMP _decEnd
                
                ;Get/decode day
                ;---------------------------------------------------------
                getDay  
    82F4 7024               CMP #36 
    82F6 18FC82             JNZ _gDay0
    82F9 480900             MOV ZP_temp1+1,#0 ;First Bit -> Clear data
                
                ;Get bit (day)      
    82FC 1A9384 _gDay0      JSR getBit
    82FF E109               ORA ZP_temp1+1
    8301 DB                 SHR
    8302 4109               STA ZP_temp1+1  
                            ;Check for last bit
    8304 320D80             LDAA VAR_second
    8307 7029               CMP #41       
    8309 18DC83             JNZ _decEnd 
                
                ;Last bit
    830C BC09               SHR ZP_temp1+1 ;Shift data right by 1 
                
                            ;Count high bits and add it to "VAR_dateParity"
    830E 3109               LDA ZP_temp1+1  
    8310 5006               LDX #6
    8312 2E                 CLY
    8313 1A9F84             JSR bitCnt
    8316 421480             STAA VAR_dateParity
                            ;Save day value
    8319 3109               LDA ZP_temp1+1
    831B 1AB484             JSR bcdToDec
    831E 421780             STAA VAR_tmpDay
    8321 10DC83             JMP _decEnd        
                
                ;Get/decode weekday
                ;---------------------------------------------------------
                getWDay 
    8324 702A               CMP #42
    8326 182C83             JNZ _getWDay0
    8329 480900             MOV ZP_temp1+1,#0 ;First Bit -> Clear data
                
                ;Get bit (weekday)    
    832C 1A9384 _getWDay0   JSR getBit
    832F E109               ORA ZP_temp1+1
    8331 DB                 SHR
    8332 4109               STA ZP_temp1+1 
                            ;Check for last bit
    8334 320D80             LDAA VAR_second
    8337 702C               CMP #44       
    8339 18DC83             JNZ _decEnd
                
                ;Last bit
                            ;Shift data right by 4
    833C 3109               LDA ZP_temp1+1 
    833E B010               DIV #10h
    8340 4109               STA ZP_temp1+1 
                
                            ;Count high bits and add it to "VAR_dateParity"
    8342 5003               LDX #3
    8344 591480             LDYA VAR_dateParity
    8347 1A9F84             JSR bitCnt
    834A 421480             STAA VAR_dateParity
                            ;Save weekday value
    834D 3109               LDA ZP_temp1+1 
    834F 1AB484             JSR bcdToDec
    8352 421880             STAA VAR_tmpWeekday
    8355 10DC83             JMP _decEnd  
                
                ;Get/decode month
                ;---------------------------------------------------------
                getMonth    
    8358 702D               CMP #45
    835A 186083             JNZ _gMon0
    835D 480900             MOV ZP_temp1+1 ,#0 ;First Bit -> Clear data
                
                ;Get bit (month)
    8360 1A9384 _gMon0      JSR getBit
    8363 E109               ORA ZP_temp1+1 
    8365 DB                 SHR
    8366 4109               STA ZP_temp1+1  
                            ;Check for last bit
    8368 320D80             LDAA VAR_second
    836B 7031               CMP #49       
    836D 18DC83             JNZ _decEnd 
                
                ;Last bit
                            ;Shift data right by 2
    8370 BC09               SHR ZP_temp1+1   
    8372 BC09               SHR ZP_temp1+1  
                
                            ;Count high bits and add it to "VAR_dateParity"
    8374 3109               LDA ZP_temp1+1   
    8376 5005               LDX #5
    8378 591480             LDYA VAR_dateParity
    837B 1A9F84             JSR bitCnt
    837E 421480             STAA VAR_dateParity
                            ;Save month value
    8381 3109               LDA ZP_temp1+1 
    8383 1AB484             JSR bcdToDec
    8386 421980             STAA VAR_tmpMonth
    8389 10DC83             JMP _decEnd 
                
                ;Get/decode year
                ;---------------------------------------------------------
                getYear     
    838C 703A               CMP #58
    838E 19A583             JPZ parityDate ;Last bit -> Check parity
    8391 7032               CMP #50
    8393 189983             JNZ _gYear0
    8396 480900             MOV ZP_temp1+1 ,#0 ;First Bit -> Clear data
                
                ;Get bit (year)
    8399 BC09   _gYear0     SHR ZP_temp1+1 
    839B 1A9384             JSR getBit
    839E E109               ORA ZP_temp1+1 
    83A0 4109               STA ZP_temp1+1  
    83A2 10DC83             JMP _decEnd
                
                ;Last bit
                ;Check parity for whole date (Day, weekday, month, year)         
                parityDate
    83A5 1A9384             JSR getBit ;Get "Carry-Bit" and save it to stack for later use
    83A8 08                 PHA
                            ;Count high bits and add it to "VAR_dateParity"
                            ;Determine if bitcount of "VAR_dateParity" is even or odd
    83A9 3109               LDA ZP_temp1+1 
    83AB 5008               LDX #8
    83AD 591480             LDYA VAR_dateParity
    83B0 1A9F84             JSR bitCnt
    83B3 17C583             JPC _pDat0
    83B6 0C                 PLA ;Bit count = "odd" 
    83B7 18C983             JNZ _pDateOK
                
    83BA 3003   _pDateBAD   LDA #03h ;Partity n.OK
    83BC D20B80             ANDA VAR_dataOK
    83BF 420B80             STAA VAR_dataOK
    83C2 10DC83             JMP _decEnd
                
    83C5 0C     _pDat0      PLA ;Bit count = "even"
    83C6 18BA83             JNZ _pDateBAD
                
    83C9 3109   _pDateOK    LDA ZP_temp1+1  ;Parity OK
    83CB 1AB484             JSR bcdToDec
    83CE 421A80             STAA VAR_tmpYear ;Save year value
    83D1 3004               LDA #04h
    83D3 E20B80             ORAA VAR_dataOK
    83D6 420B80             STAA VAR_dataOK
    83D9 10DC83             JMP _decEnd
                
                ;Decoding end
                ;---------------------------------------------------------
                ;Ready for next bit
    83DC 2F0880 _decEnd     STZ FLG_dcfReceiver ;Reset dcf77 interrupt flag 
    83DF 480800             MOV ZP_temp1, #0 ;Reset Edge time
    83E2 04                 CLC
    83E3 1BA802             JSR (KERN_SPINLOCK) ;Enable the interrupts again
    83E6 1F                 RTS
                
                ;Interference detected -> continue            
    83E7 2F0880 _decIgnore  STZ FLG_dcfReceiver ;Reset dcf77 interrupt flag 
    83EA 04                 CLC
    83EB 1BA802             JSR (KERN_SPINLOCK) ;Enable the interrupts again
    83EE 1F                 RTS
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on Multi-I/O LEDs   
                ;---------------------------------------------------------
                syncDisp
                ;Display synced status           
    83EF 320980             LDAA FLG_synced
    83F2 190084             JPZ _syncD0
    83F5 3008               LDA #08h 
    83F7 F21B80             EORA VAR_ledsDataOK
    83FA 421B80             STAA VAR_ledsDataOK
    83FD 105884             JMP _syncD4
    8400 3008   _syncD0     LDA #08h 
    8402 E21B80             ORAA VAR_ledsDataOK
    8405 421B80             STAA VAR_ledsDataOK
                
    8408 320D80             LDAA VAR_second
    840B 7015               CMP #21
    840D 165884             JNC _syncD4 ;Second <21 -> No time information fetching
    8410 701D               CMP #29
    8412 162284             JNC _syncD1 ;Second >= 21 & <29 -> Fetching minutes
    8415 7024               CMP #36
    8417 163584             JNC _syncD2 ;Second >= 29 & < 36 -> Fetching hours
    841A 703B               CMP #59
    841C 164884             JNC _syncD3 ;Second >= 36 & < 59 -> Fetching date
    841F 105884             JMP _syncD4
                
                ;Fetching minutes
    8422 320B80 _syncD1     LDAA VAR_dataOK
    8425 D001               AND #01h
    8427 185884             JNZ _syncD4
    842A 3001               LDA #01h 
    842C F21B80             EORA VAR_ledsDataOK
    842F 421B80             STAA VAR_ledsDataOK
    8432 105884             JMP _syncD4
                
                ;Fetching hours
    8435 320B80 _syncD2     LDAA VAR_dataOK
    8438 D002               AND #02h
    843A 185884             JNZ _syncD4
    843D 3002               LDA #02h 
    843F F21B80             EORA VAR_ledsDataOK
    8442 421B80             STAA VAR_ledsDataOK
    8445 105884             JMP _syncD4
                
                ;Fetching date 
    8448 320B80 _syncD3     LDAA VAR_dataOK
    844B D004               AND #04h
    844D 185884             JNZ _syncD4
    8450 3004               LDA #04h 
    8452 F21B80             EORA VAR_ledsDataOK
    8455 421B80             STAA VAR_ledsDataOK
                
    8458 320B80 _syncD4     LDAA VAR_dataOK
    845B E21B80             ORAA VAR_ledsDataOK
    845E 1B0603             JSR (KERN_IOCHANGELED)
    8461 1F                 RTS
                
                
                ;--------------------------------------------------------- 
                ;Display snyc/data status on SCC-Board   
                ;---------------------------------------------------------
                sccBoard
                ;Receiver not synced (LED off)           
    8462 320980             LDAA FLG_synced
    8465 197984             JPZ _sccB0
    8468 320030             LDAA HDW_SCC_BOARD
    846B D004               AND #04h
    846D 19C284             JPZ _RTS
    8470 320030             LDAA HDW_SCC_BOARD
    8473 F004               EOR #04h
    8475 420030             STAA HDW_SCC_BOARD
    8478 1F                 RTS
                
                ;Receiver synced but no data available (Toggle LED)
    8479 320B80 _sccB0      LDAA VAR_dataOK
    847C 7007               CMP #07h
    847E 198A84             JPZ _sccB1
    8481 320030             LDAA HDW_SCC_BOARD
    8484 F004               EOR #04h
    8486 420030             STAA HDW_SCC_BOARD
    8489 1F                 RTS
                
                ;Receiver synced and data available (LED on)         
    848A 320030 _sccB1      LDAA HDW_SCC_BOARD
    848D E004               ORA #04h
    848F 420030             STAA HDW_SCC_BOARD
    8492 1F                 RTS     
                
                ;--------------------------------------------------------- 
                ;Helper functions   
                ;---------------------------------------------------------
                
                ;Get bit information from Time (Output: A = High(80h), Low(00h))        
                getBit      
    8493 3108               LDA ZP_temp1
    8495 7004               CMP #PARAM_LOWHIGH
    8497 169D84             JNC _gBit0
                            ;Time >= PARAM_LOWHIGH -> Bit = 1
    849A 3080               LDA #80h
    849C 4D                 SKA
    849D 2C     _gBit0      CLA ;Time < PARAM_LOWHIGH -> Bit = 0
    849E 1F                 RTS
                
                ;Count high bits
                ;Input: A = Byte, X = Number of bits, Y = Counter offset
                ;Output: A = Counter value, Carry = 0 -> odd, Carry = 1 -> even
                bitCnt
    849F DB     _bCnt0      SHR
    84A0 16A484             JNC _bCnt1
    84A3 8B                 INY
    84A4 499F84 _bCnt1      DXJP _bCnt0
    84A7 29                 SAY
    84A8 08                 PHA
    84A9 C002               MOD #2
    84AB 19B084             JPZ _bCnt2
    84AE 04                 CLC ;Counter value "odd"
    84AF 4D                 SKA
    84B0 05     _bCnt2      SEC ;Counter value "even"
    84B1 0C                 PLA
    84B2 1F                 RTS
                
                ;Convert BCD to decimal (Input: A = BCD value) (Output: A = decimal vlaue) 
    84B3 00     VAR_tmpConvert  DB  0      
                bcdToDec
    84B4 08                 PHA
    84B5 B010               DIV #10h
    84B7 A00A               MUL #0Ah
    84B9 4109               STA ZP_temp1+1
    84BB 0C                 PLA
    84BC D00F               AND #0Fh
    84BE 04                 CLC
    84BF 8109               ADC ZP_temp1+1
    84C1 1F                 RTS
                
                _RTS    
    84C2 04                 CLC
    84C3 1F                 RTS
                
                _failRTS
    84C4 2C                 CLA
    84C5 05                 SEC
    84C6 1F                 RTS
                
                


Segment Table:
**************
Segment Name                 Startaddr  Endaddr     Size  Type
=========================================================================
default                           8000     84C6      4C7  CODE  fixed
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

No errors found.
